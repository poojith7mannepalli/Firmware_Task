
FIRMWARE_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa0  08004aa0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000055c  20000098  08004b3c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004b3c  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9fd  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a8  00000000  00000000  0002cafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007be  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a9b  00000000  00000000  0002fd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4d5  00000000  00000000  00031809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad5f1  00000000  00000000  0003dcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002308  00000000  00000000  000eb2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000ed5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049e4 	.word	0x080049e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	080049e4 	.word	0x080049e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <EEPROM_WRITE>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void EEPROM_WRITE(uint32_t address, uint64_t data) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	607b      	str	r3, [r7, #4]
    uint32_t writeAddress = EEPROM_EMULATION_ADDRESS + address * DOUBLE_WORD_SIZE;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <EEPROM_WRITE+0x38>)
 8000630:	4694      	mov	ip, r2
 8000632:	4463      	add	r3, ip
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	617b      	str	r3, [r7, #20]
    HAL_FLASH_Unlock();
 8000638:	f000 fddc 	bl	80011f4 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, writeAddress, data);
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6979      	ldr	r1, [r7, #20]
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	02c0      	lsls	r0, r0, #11
 8000646:	f000 fd87 	bl	8001158 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 800064a:	f000 fdf7 	bl	800123c <HAL_FLASH_Lock>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b006      	add	sp, #24
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	01003f00 	.word	0x01003f00

0800065c <EEPROM_Read>:
void EEPROM_Read(uint32_t address, uint8_t *data, uint32_t length) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
    uint32_t readAddress = EEPROM_EMULATION_ADDRESS + address * DOUBLE_WORD_SIZE;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <EEPROM_Read+0x6c>)
 800066c:	4694      	mov	ip, r2
 800066e:	4463      	add	r3, ip
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < length; i += DOUBLE_WORD_SIZE) {
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
 8000678:	e01d      	b.n	80006b6 <EEPROM_Read+0x5a>
        uint64_t tempData = *(uint64_t *)(readAddress + i);
 800067a:	6a3a      	ldr	r2, [r7, #32]
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	18d3      	adds	r3, r2, r3
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	613a      	str	r2, [r7, #16]
 8000686:	617b      	str	r3, [r7, #20]
        uint32_t bytesToCopy = (i + DOUBLE_WORD_SIZE > length) ? length % DOUBLE_WORD_SIZE : DOUBLE_WORD_SIZE;
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	3308      	adds	r3, #8
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d203      	bcs.n	800069a <EEPROM_Read+0x3e>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2207      	movs	r2, #7
 8000696:	4013      	ands	r3, r2
 8000698:	e000      	b.n	800069c <EEPROM_Read+0x40>
 800069a:	2308      	movs	r3, #8
 800069c:	61fb      	str	r3, [r7, #28]
        memcpy(&data[i], &tempData, bytesToCopy);
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	18d3      	adds	r3, r2, r3
 80006a4:	69fa      	ldr	r2, [r7, #28]
 80006a6:	2110      	movs	r1, #16
 80006a8:	1879      	adds	r1, r7, r1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f004 f990 	bl	80049d0 <memcpy>
    for (uint32_t i = 0; i < length; i += DOUBLE_WORD_SIZE) {
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	3308      	adds	r3, #8
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
 80006b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3dd      	bcc.n	800067a <EEPROM_Read+0x1e>
    }
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b00a      	add	sp, #40	; 0x28
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	01003f00 	.word	0x01003f00

080006cc <BufferAndWriteEEPROM>:
void BufferAndWriteEEPROM(uint8_t data) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)&DoubleWordBuffer)[DoubleWordBufferIndex++] = data;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <BufferAndWriteEEPROM+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	b2d1      	uxtb	r1, r2
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <BufferAndWriteEEPROM+0x58>)
 80006e2:	7011      	strb	r1, [r2, #0]
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <BufferAndWriteEEPROM+0x5c>)
 80006e8:	18d3      	adds	r3, r2, r3
 80006ea:	1dfa      	adds	r2, r7, #7
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	701a      	strb	r2, [r3, #0]
    if (DoubleWordBufferIndex == DOUBLE_WORD_SIZE) {
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <BufferAndWriteEEPROM+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	d110      	bne.n	800071a <BufferAndWriteEEPROM+0x4e>
        EEPROM_WRITE(RxIndex / DOUBLE_WORD_SIZE, DoubleWordBuffer);
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <BufferAndWriteEEPROM+0x60>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	08d9      	lsrs	r1, r3, #3
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <BufferAndWriteEEPROM+0x5c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	0008      	movs	r0, r1
 8000706:	f7ff ff8b 	bl	8000620 <EEPROM_WRITE>
        DoubleWordBuffer = 0;
 800070a:	4907      	ldr	r1, [pc, #28]	; (8000728 <BufferAndWriteEEPROM+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	2300      	movs	r3, #0
 8000710:	600a      	str	r2, [r1, #0]
 8000712:	604b      	str	r3, [r1, #4]
        DoubleWordBufferIndex = 0;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <BufferAndWriteEEPROM+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
    }
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	200005d0 	.word	0x200005d0
 8000728:	200005c8 	.word	0x200005c8
 800072c:	200005c4 	.word	0x200005c4

08000730 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <HAL_UART_RxCpltCallback+0x7c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d130      	bne.n	80007a4 <HAL_UART_RxCpltCallback+0x74>
        if (RxIndex < RX_BUFFER_SIZE) {
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	23fa      	movs	r3, #250	; 0xfa
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	429a      	cmp	r2, r3
 800074c:	d22a      	bcs.n	80007a4 <HAL_UART_RxCpltCallback+0x74>
            BufferAndWriteEEPROM(RxBuffer[RxIndex]);
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <HAL_UART_RxCpltCallback+0x84>)
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff ffb8 	bl	80006cc <BufferAndWriteEEPROM>
            RxIndex++;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000764:	601a      	str	r2, [r3, #0]

            if (RxIndex == RX_BUFFER_SIZE) {
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	429a      	cmp	r2, r3
 8000770:	d10f      	bne.n	8000792 <HAL_UART_RxCpltCallback+0x62>

                if (DoubleWordBufferIndex > 0) {
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_RxCpltCallback+0x88>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <HAL_UART_RxCpltCallback+0x5c>
                    EEPROM_WRITE(RxIndex / DOUBLE_WORD_SIZE, DoubleWordBuffer);
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	08d9      	lsrs	r1, r3, #3
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_UART_RxCpltCallback+0x8c>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	0008      	movs	r0, r1
 8000788:	f7ff ff4a 	bl	8000620 <EEPROM_WRITE>
                }
                TransmitBack();
 800078c:	f000 f81a 	bl	80007c4 <TransmitBack>
            } else {
                HAL_UART_Receive_IT(&huart1, &RxBuffer[RxIndex], 1);
            }
        }
    }
}
 8000790:	e008      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x74>
                HAL_UART_Receive_IT(&huart1, &RxBuffer[RxIndex], 1);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_UART_RxCpltCallback+0x84>)
 8000798:	18d1      	adds	r1, r2, r3
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_UART_RxCpltCallback+0x90>)
 800079c:	2201      	movs	r2, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fff2 	bl	8002788 <HAL_UART_Receive_IT>
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013800 	.word	0x40013800
 80007b0:	200005c4 	.word	0x200005c4
 80007b4:	200001dc 	.word	0x200001dc
 80007b8:	200005d0 	.word	0x200005d0
 80007bc:	200005c8 	.word	0x200005c8
 80007c0:	200000b4 	.word	0x200000b4

080007c4 <TransmitBack>:

void TransmitBack(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	4f0c      	ldr	r7, [pc, #48]	; (80007f8 <TransmitBack+0x34>)
 80007c8:	44bd      	add	sp, r7
 80007ca:	af00      	add	r7, sp, #0
    uint8_t dataToTransmit[RX_BUFFER_SIZE];
    EEPROM_Read(0, dataToTransmit, RX_BUFFER_SIZE);
 80007cc:	23fa      	movs	r3, #250	; 0xfa
 80007ce:	009a      	lsls	r2, r3, #2
 80007d0:	003b      	movs	r3, r7
 80007d2:	0019      	movs	r1, r3
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff41 	bl	800065c <EEPROM_Read>
    HAL_UART_Transmit(&huart1, dataToTransmit, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	22fa      	movs	r2, #250	; 0xfa
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	0039      	movs	r1, r7
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <TransmitBack+0x38>)
 80007e6:	f001 ff2b 	bl	8002640 <HAL_UART_Transmit>
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	23fa      	movs	r3, #250	; 0xfa
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	449d      	add	sp, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	fffffc18 	.word	0xfffffc18
 80007fc:	200000b4 	.word	0x200000b4

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fa7c 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f816 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 f8f8 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f8a8 	bl	8000964 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000814:	f000 f858 	bl	80008c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &RxBuffer[RxIndex], 1);
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <main+0x2c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <main+0x30>)
 800081e:	18d1      	adds	r1, r2, r3
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <main+0x34>)
 8000822:	2201      	movs	r2, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f001 ffaf 	bl	8002788 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0x2a>
 800082c:	200005c4 	.word	0x200005c4
 8000830:	200001dc 	.word	0x200001dc
 8000834:	200000b4 	.word	0x200000b4

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b095      	sub	sp, #84	; 0x54
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	2414      	movs	r4, #20
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	233c      	movs	r3, #60	; 0x3c
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f004 f895 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	2310      	movs	r3, #16
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f004 f88e 	bl	8004978 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ff05 	bl	8001670 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2202      	movs	r2, #2
 800086a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	f000 ff3d 	bl	8001708 <HAL_RCC_OscConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000892:	f000 f905 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2100      	movs	r1, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fa88 	bl	8001dc8 <HAL_RCC_ClockConfig>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008bc:	f000 f8f0 	bl	8000aa0 <Error_Handler>
  }
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b015      	add	sp, #84	; 0x54
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008ce:	4a24      	ldr	r2, [pc, #144]	; (8000960 <MX_USART1_UART_Init+0x98>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008d4:	2296      	movs	r2, #150	; 0x96
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_USART1_UART_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART1_UART_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fe3e 	bl	8002594 <HAL_UART_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 f8c0 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000922:	2100      	movs	r1, #0
 8000924:	0018      	movs	r0, r3
 8000926:	f003 ff47 	bl	80047b8 <HAL_UARTEx_SetTxFifoThreshold>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800092e:	f000 f8b7 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000934:	2100      	movs	r1, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f003 ff7e 	bl	8004838 <HAL_UARTEx_SetRxFifoThreshold>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 f8ae 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <MX_USART1_UART_Init+0x94>)
 8000946:	0018      	movs	r0, r3
 8000948:	f003 fefc 	bl	8004744 <HAL_UARTEx_DisableFifoMode>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 f8a6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	200000b4 	.word	0x200000b4
 8000960:	40013800 	.word	0x40013800

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <MX_USART2_UART_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 8000970:	22e1      	movs	r2, #225	; 0xe1
 8000972:	0252      	lsls	r2, r2, #9
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fdf0 	bl	8002594 <HAL_UART_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f872 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 fef9 	bl	80047b8 <HAL_UARTEx_SetTxFifoThreshold>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f869 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f003 ff30 	bl	8004838 <HAL_UARTEx_SetRxFifoThreshold>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f860 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 feae 	bl	8004744 <HAL_UARTEx_DisableFifoMode>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f858 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000148 	.word	0x20000148
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	240c      	movs	r4, #12
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f003 ffb1 	bl	8004978 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2204      	movs	r2, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a34:	2120      	movs	r1, #32
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2220      	movs	r2, #32
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_GPIO_Init+0x9c>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2201      	movs	r2, #1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fde4 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a6c:	0021      	movs	r1, r4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2220      	movs	r2, #32
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2202      	movs	r2, #2
 8000a84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fc64 	bl	800135c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b009      	add	sp, #36	; 0x24
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0549      	lsls	r1, r1, #21
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_MspInit+0x44>)
 8000ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	055b      	lsls	r3, r3, #21
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b09f      	sub	sp, #124	; 0x7c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 ff36 	bl	8004978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	2418      	movs	r4, #24
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	234c      	movs	r3, #76	; 0x4c
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f003 ff2e 	bl	8004978 <memset>
  if(huart->Instance==USART1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a49      	ldr	r2, [pc, #292]	; (8000c48 <HAL_UART_MspInit+0x154>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d146      	bne.n	8000bb4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 faf1 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b3e:	f7ff ffaf 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b42:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b46:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	01c9      	lsls	r1, r1, #7
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b50:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	01db      	lsls	r3, r3, #7
 8000b58:	4013      	ands	r3, r2
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b64:	2104      	movs	r1, #4
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b76:	2164      	movs	r1, #100	; 0x64
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2202      	movs	r2, #2
 8000b82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2201      	movs	r2, #1
 8000b94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <HAL_UART_MspInit+0x15c>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f000 fbdd 	bl	800135c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201b      	movs	r0, #27
 8000ba8:	f000 f9dc 	bl	8000f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bac:	201b      	movs	r0, #27
 8000bae:	f000 f9ee 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb2:	e044      	b.n	8000c3e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_UART_MspInit+0x160>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d13f      	bne.n	8000c3e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbe:	2118      	movs	r1, #24
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 faa4 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000bd8:	f7ff ff62 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	0289      	lsls	r1, r1, #10
 8000be6:	430a      	orrs	r2, r1
 8000be8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	029b      	lsls	r3, r3, #10
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	430a      	orrs	r2, r1
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0x158>)
 8000c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c10:	2164      	movs	r1, #100	; 0x64
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	220c      	movs	r2, #12
 8000c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	187a      	adds	r2, r7, r1
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fb8f 	bl	800135c <HAL_GPIO_Init>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b01f      	add	sp, #124	; 0x7c
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	50000800 	.word	0x50000800
 8000c54:	40004400 	.word	0x40004400

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f8aa 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <USART1_IRQHandler+0x14>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f001 fde0 	bl	8002854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200000b4 	.word	0x200000b4

08000ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f7ff fff6 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f003 fe55 	bl	8004988 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cde:	f7ff fd8f 	bl	8000800 <main>

08000ce2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000cf0:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 8000cf4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000cf8:	200005f4 	.word	0x200005f4

08000cfc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_COMP_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Init+0x3c>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0049      	lsls	r1, r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f810 	bl	8000d40 <HAL_InitTick>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff febe 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_InitTick+0x88>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d02b      	beq.n	8000db0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_InitTick+0x8c>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_InitTick+0x88>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	0019      	movs	r1, r3
 8000d62:	23fa      	movs	r3, #250	; 0xfa
 8000d64:	0098      	lsls	r0, r3, #2
 8000d66:	f7ff f9cf 	bl	8000108 <__udivsi3>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f7ff f9ca 	bl	8000108 <__udivsi3>
 8000d74:	0003      	movs	r3, r0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f919 	bl	8000fae <HAL_SYSTICK_Config>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d112      	bne.n	8000da6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80a      	bhi.n	8000d9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8e8 	bl	8000f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_InitTick+0x90>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e00d      	b.n	8000db8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e008      	b.n	8000db8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e003      	b.n	8000db8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	18d2      	adds	r2, r2, r3
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200005d4 	.word	0x200005d4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	200005d4 	.word	0x200005d4

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e1e:	d809      	bhi.n	8000e34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	231f      	movs	r3, #31
 8000e28:	401a      	ands	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_EnableIRQ+0x30>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	000a      	movs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b7f      	cmp	r3, #127	; 0x7f
 8000e54:	d828      	bhi.n	8000ea8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	33c0      	adds	r3, #192	; 0xc0
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	589b      	ldr	r3, [r3, r2]
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	400a      	ands	r2, r1
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	401a      	ands	r2, r3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	4003      	ands	r3, r0
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	481f      	ldr	r0, [pc, #124]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	33c0      	adds	r3, #192	; 0xc0
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ea6:	e031      	b.n	8000f0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0019      	movs	r1, r3
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3306      	adds	r3, #6
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	18d3      	adds	r3, r2, r3
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	; 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	001c      	movs	r4, r3
 8000ef8:	230f      	movs	r3, #15
 8000efa:	4023      	ands	r3, r4
 8000efc:	3b08      	subs	r3, #8
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	430a      	orrs	r2, r1
 8000f02:	3306      	adds	r3, #6
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	18c3      	adds	r3, r0, r3
 8000f08:	3304      	adds	r3, #4
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b003      	add	sp, #12
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	045b      	lsls	r3, r3, #17
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d301      	bcc.n	8000f34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f30:	2301      	movs	r3, #1
 8000f32:	e010      	b.n	8000f56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SysTick_Config+0x44>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2103      	movs	r1, #3
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff7c 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x44>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x44>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	210f      	movs	r1, #15
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	1c02      	adds	r2, r0, #0
 8000f74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	0002      	movs	r2, r0
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff ff33 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ffaf 	bl	8000f1c <SysTick_Config>
 8000fbe:	0003      	movs	r3, r0
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e04f      	b.n	800107a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2225      	movs	r2, #37	; 0x25
 8000fde:	5c9b      	ldrb	r3, [r3, r2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d008      	beq.n	8000ff8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2204      	movs	r2, #4
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2224      	movs	r2, #36	; 0x24
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e040      	b.n	800107a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	210e      	movs	r1, #14
 8001004:	438a      	bics	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001012:	491c      	ldr	r1, [pc, #112]	; (8001084 <HAL_DMA_Abort+0xbc>)
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2101      	movs	r1, #1
 8001024:	438a      	bics	r2, r1
 8001026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	221c      	movs	r2, #28
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2101      	movs	r1, #1
 8001036:	4091      	lsls	r1, r2
 8001038:	000a      	movs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001044:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	490a      	ldr	r1, [pc, #40]	; (8001084 <HAL_DMA_Abort+0xbc>)
 800105a:	400a      	ands	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001066:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2225      	movs	r2, #37	; 0x25
 800106c:	2101      	movs	r1, #1
 800106e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	fffffeff 	.word	0xfffffeff

08001088 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	210f      	movs	r1, #15
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2225      	movs	r2, #37	; 0x25
 800109c:	5c9b      	ldrb	r3, [r3, r2]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d006      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2204      	movs	r2, #4
 80010a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e048      	b.n	8001144 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	210e      	movs	r1, #14
 80010be:	438a      	bics	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010dc:	491d      	ldr	r1, [pc, #116]	; (8001154 <HAL_DMA_Abort_IT+0xcc>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	221c      	movs	r2, #28
 80010e8:	401a      	ands	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2101      	movs	r1, #1
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	4910      	ldr	r1, [pc, #64]	; (8001154 <HAL_DMA_Abort_IT+0xcc>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001120:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2225      	movs	r2, #37	; 0x25
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2224      	movs	r2, #36	; 0x24
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	0010      	movs	r0, r2
 8001142:	4798      	blx	r3
    }
  }
  return status;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	fffffeff 	.word	0xfffffeff

08001158 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	603a      	str	r2, [r7, #0]
 8001164:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_FLASH_Program+0x94>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_FLASH_Program+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e038      	b.n	80011e4 <HAL_FLASH_Program+0x8c>
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_FLASH_Program+0x94>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_FLASH_Program+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800117e:	2517      	movs	r5, #23
 8001180:	197c      	adds	r4, r7, r5
 8001182:	23fa      	movs	r3, #250	; 0xfa
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	0018      	movs	r0, r3
 8001188:	f000 f87a 	bl	8001280 <FLASH_WaitForLastOperation>
 800118c:	0003      	movs	r3, r0
 800118e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001190:	197b      	adds	r3, r7, r5
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d11f      	bne.n	80011d8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d106      	bne.n	80011ac <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	0008      	movs	r0, r1
 80011a6:	f000 f8b9 	bl	800131c <FLASH_Program_DoubleWord>
 80011aa:	e005      	b.n	80011b8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f003 fc24 	bl	8004a00 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011b8:	2317      	movs	r3, #23
 80011ba:	18fc      	adds	r4, r7, r3
 80011bc:	23fa      	movs	r3, #250	; 0xfa
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 f85d 	bl	8001280 <FLASH_WaitForLastOperation>
 80011c6:	0003      	movs	r3, r0
 80011c8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_FLASH_Program+0x98>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43d9      	mvns	r1, r3
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_FLASH_Program+0x98>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_FLASH_Program+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80011de:	2317      	movs	r3, #23
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	200005d8 	.word	0x200005d8
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_FLASH_Unlock+0x3c>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	da0c      	bge.n	8001222 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_FLASH_Unlock+0x3c>)
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_FLASH_Unlock+0x40>)
 800120c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_FLASH_Unlock+0x3c>)
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_FLASH_Unlock+0x44>)
 8001212:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_FLASH_Unlock+0x3c>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da02      	bge.n	8001222 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40022000 	.word	0x40022000
 8001234:	45670123 	.word	0x45670123
 8001238:	cdef89ab 	.word	0xcdef89ab

0800123c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001248:	23fa      	movs	r3, #250	; 0xfa
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 f817 	bl	8001280 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_FLASH_Lock+0x40>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_FLASH_Lock+0x40>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0609      	lsls	r1, r1, #24
 800125c:	430a      	orrs	r2, r1
 800125e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_FLASH_Lock+0x40>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da02      	bge.n	800126e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40022000 	.word	0x40022000

08001280 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff fdb6 	bl	8000df8 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	029b      	lsls	r3, r3, #10
 8001294:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8001296:	e00c      	b.n	80012b2 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3301      	adds	r3, #1
 800129c:	d009      	beq.n	80012b2 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800129e:	f7ff fdab 	bl	8000df8 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d801      	bhi.n	80012b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e028      	b.n	8001304 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <FLASH_WaitForLastOperation+0x8c>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1ed      	bne.n	8001298 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <FLASH_WaitForLastOperation+0x8c>)
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <FLASH_WaitForLastOperation+0x90>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <FLASH_WaitForLastOperation+0x8c>)
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <FLASH_WaitForLastOperation+0x94>)
 80012ca:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d011      	beq.n	80012f6 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <FLASH_WaitForLastOperation+0x98>)
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e013      	b.n	8001304 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3301      	adds	r3, #1
 80012e0:	d009      	beq.n	80012f6 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80012e2:	f7ff fd89 	bl	8000df8 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d801      	bhi.n	80012f6 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e006      	b.n	8001304 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <FLASH_WaitForLastOperation+0x8c>)
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	02db      	lsls	r3, r3, #11
 80012fe:	4013      	ands	r3, r2
 8001300:	d1ec      	bne.n	80012dc <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40022000 	.word	0x40022000
 8001310:	0000c3fa 	.word	0x0000c3fa
 8001314:	0008c3fb 	.word	0x0008c3fb
 8001318:	200005d8 	.word	0x200005d8

0800131c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	603a      	str	r2, [r7, #0]
 8001326:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <FLASH_Program_DoubleWord+0x3c>)
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <FLASH_Program_DoubleWord+0x3c>)
 800132e:	2101      	movs	r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800133a:	f3bf 8f6f 	isb	sy
}
 800133e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	001c      	movs	r4, r3
 8001344:	2300      	movs	r3, #0
 8001346:	001d      	movs	r5, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3304      	adds	r3, #4
 800134c:	0022      	movs	r2, r4
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e14d      	b.n	8001608 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x28>
 8001382:	e13e      	b.n	8001602 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	2201      	movs	r2, #1
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	4013      	ands	r3, r2
 8001406:	2b03      	cmp	r3, #3
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	4013      	ands	r3, r2
 8001442:	2b02      	cmp	r3, #2
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	58d3      	ldr	r3, [r2, r3]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2107      	movs	r1, #7
 8001472:	400b      	ands	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	6939      	ldr	r1, [r7, #16]
 800148c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	401a      	ands	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_GPIO_Init+0x174>
 80014ce:	e098      	b.n	8001602 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014d0:	4a53      	ldr	r2, [pc, #332]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3318      	adds	r3, #24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	589b      	ldr	r3, [r3, r2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2203      	movs	r2, #3
 80014e2:	4013      	ands	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	220f      	movs	r2, #15
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	23a0      	movs	r3, #160	; 0xa0
 80014f8:	05db      	lsls	r3, r3, #23
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x1d6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x1d2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x1ce>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x1ca>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x1c6>
 800151e:	2304      	movs	r3, #4
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001522:	2305      	movs	r3, #5
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001532:	2300      	movs	r3, #0
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	2103      	movs	r1, #3
 8001538:	400a      	ands	r2, r1
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	4093      	lsls	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001544:	4936      	ldr	r1, [pc, #216]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3318      	adds	r3, #24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	035b      	lsls	r3, r3, #13
 800156a:	4013      	ands	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	039b      	lsls	r3, r3, #14
 8001594:	4013      	ands	r3, r2
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015a8:	2384      	movs	r3, #132	; 0x84
 80015aa:	58d3      	ldr	r3, [r2, r3]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43da      	mvns	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	4013      	ands	r3, r2
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015cc:	4914      	ldr	r1, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015ce:	2284      	movs	r2, #132	; 0x84
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	58d3      	ldr	r3, [r2, r3]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4013      	ands	r3, r2
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fa:	4909      	ldr	r1, [pc, #36]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	40da      	lsrs	r2, r3
 8001610:	1e13      	subs	r3, r2, #0
 8001612:	d000      	beq.n	8001616 <HAL_GPIO_Init+0x2ba>
 8001614:	e6aa      	b.n	800136c <HAL_GPIO_Init+0x10>
  }
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021800 	.word	0x40021800
 8001624:	50000400 	.word	0x50000400
 8001628:	50000800 	.word	0x50000800
 800162c:	50000c00 	.word	0x50000c00
 8001630:	50001000 	.word	0x50001000

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	0008      	movs	r0, r1
 800163e:	0011      	movs	r1, r2
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	1c7b      	adds	r3, r7, #1
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	1c7b      	adds	r3, r7, #1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001654:	1cbb      	adds	r3, r7, #2
 8001656:	881a      	ldrh	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	1cbb      	adds	r3, r7, #2
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800167e:	4013      	ands	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d11f      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	0013      	movs	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	189b      	adds	r3, r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4912      	ldr	r1, [pc, #72]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd30 	bl	8000108 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ae:	e008      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e001      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e009      	b.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	401a      	ands	r2, r3
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d0ed      	beq.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40007000 	.word	0x40007000
 80016e4:	fffff9ff 	.word	0xfffff9ff
 80016e8:	20000000 	.word	0x20000000
 80016ec:	000f4240 	.word	0x000f4240

080016f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <LL_RCC_GetAPB1Prescaler+0x14>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	23e0      	movs	r3, #224	; 0xe0
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4013      	ands	r3, r2
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	f000 fb50 	bl	8001dbc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	d100      	bne.n	8001728 <HAL_RCC_OscConfig+0x20>
 8001726:	e07c      	b.n	8001822 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001728:	4bc3      	ldr	r3, [pc, #780]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2238      	movs	r2, #56	; 0x38
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001732:	4bc1      	ldr	r3, [pc, #772]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2203      	movs	r2, #3
 8001738:	4013      	ands	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b10      	cmp	r3, #16
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0x40>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d002      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4bba      	ldr	r3, [pc, #744]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d062      	beq.n	8001820 <HAL_RCC_OscConfig+0x118>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d15e      	bne.n	8001820 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e32a      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_OscConfig+0x7a>
 8001772:	4bb1      	ldr	r3, [pc, #708]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4bb0      	ldr	r3, [pc, #704]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0249      	lsls	r1, r1, #9
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e020      	b.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	23a0      	movs	r3, #160	; 0xa0
 8001788:	02db      	lsls	r3, r3, #11
 800178a:	429a      	cmp	r2, r3
 800178c:	d10e      	bne.n	80017ac <HAL_RCC_OscConfig+0xa4>
 800178e:	4baa      	ldr	r3, [pc, #680]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4ba9      	ldr	r3, [pc, #676]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	02c9      	lsls	r1, r1, #11
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	4ba6      	ldr	r3, [pc, #664]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4ba5      	ldr	r3, [pc, #660]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	0249      	lsls	r1, r1, #9
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017ac:	4ba2      	ldr	r3, [pc, #648]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4ba1      	ldr	r3, [pc, #644]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017b2:	49a2      	ldr	r1, [pc, #648]	; (8001a3c <HAL_RCC_OscConfig+0x334>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b9f      	ldr	r3, [pc, #636]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017be:	49a0      	ldr	r1, [pc, #640]	; (8001a40 <HAL_RCC_OscConfig+0x338>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb14 	bl	8000df8 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb0f 	bl	8000df8 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2e9      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0xce>
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff faff 	bl	8000df8 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fafa 	bl	8000df8 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e2d4      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xf8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x126>
 800182c:	e099      	b.n	8001962 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x146>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d002      	beq.n	8001854 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d135      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4013      	ands	r3, r2
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x164>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2a7      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a74      	ldr	r2, [pc, #464]	; (8001a44 <HAL_RCC_OscConfig+0x33c>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	021a      	lsls	r2, r3, #8
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001888:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x340>)
 800188e:	4013      	ands	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800189c:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0adb      	lsrs	r3, r3, #11
 80018a2:	2207      	movs	r2, #7
 80018a4:	4013      	ands	r3, r2
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_RCC_OscConfig+0x344>)
 80018a8:	40da      	lsrs	r2, r3
 80018aa:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x348>)
 80018ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018ae:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x34c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff fa44 	bl	8000d40 <HAL_InitTick>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d051      	beq.n	8001960 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e27d      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d030      	beq.n	800192a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018c8:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a5e      	ldr	r2, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x340>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0049      	lsls	r1, r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fa85 	bl	8000df8 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fa80 	bl	8000df8 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e25a      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4013      	ands	r3, r2
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x33c>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e01b      	b.n	8001962 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001930:	4949      	ldr	r1, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x350>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff fa5f 	bl	8000df8 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fa5a 	bl	8000df8 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e234      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4013      	ands	r3, r2
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x238>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2208      	movs	r2, #8
 8001968:	4013      	ands	r3, r2
 800196a:	d047      	beq.n	80019fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2238      	movs	r2, #56	; 0x38
 8001972:	4013      	ands	r3, r2
 8001974:	2b18      	cmp	r3, #24
 8001976:	d10a      	bne.n	800198e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800197a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d03c      	beq.n	80019fc <HAL_RCC_OscConfig+0x2f4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d138      	bne.n	80019fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e216      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d019      	beq.n	80019ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa29 	bl	8000df8 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fa24 	bl	8000df8 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1fe      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d0f1      	beq.n	80019ac <HAL_RCC_OscConfig+0x2a4>
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80019cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	438a      	bics	r2, r1
 80019d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff fa0f 	bl	8000df8 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fa0a 	bl	8000df8 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1e4      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1f1      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_RCC_OscConfig+0x300>
 8001a06:	e0c7      	b.n	8001b98 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a08:	231f      	movs	r3, #31
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2238      	movs	r2, #56	; 0x38
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d11f      	bne.n	8001a5c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x320>
 8001a26:	e0b7      	b.n	8001b98 <HAL_RCC_OscConfig+0x490>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <HAL_RCC_OscConfig+0x32a>
 8001a30:	e0b2      	b.n	8001b98 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1c2      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	fffeffff 	.word	0xfffeffff
 8001a40:	fffbffff 	.word	0xfffbffff
 8001a44:	ffff80ff 	.word	0xffff80ff
 8001a48:	ffffc7ff 	.word	0xffffc7ff
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004
 8001a58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a5c:	4bb5      	ldr	r3, [pc, #724]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	4013      	ands	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x364>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x366>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d011      	beq.n	8001a96 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4bb0      	ldr	r3, [pc, #704]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a76:	4baf      	ldr	r3, [pc, #700]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0549      	lsls	r1, r1, #21
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a80:	4bac      	ldr	r3, [pc, #688]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a8e:	231f      	movs	r3, #31
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4ba8      	ldr	r3, [pc, #672]	; (8001d38 <HAL_RCC_OscConfig+0x630>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d11a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa2:	4ba5      	ldr	r3, [pc, #660]	; (8001d38 <HAL_RCC_OscConfig+0x630>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4ba4      	ldr	r3, [pc, #656]	; (8001d38 <HAL_RCC_OscConfig+0x630>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f9a2 	bl	8000df8 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f99d 	bl	8000df8 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e177      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	4b9a      	ldr	r3, [pc, #616]	; (8001d38 <HAL_RCC_OscConfig+0x630>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x3e6>
 8001ae0:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001ae2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae4:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aec:	e01c      	b.n	8001b28 <HAL_RCC_OscConfig+0x420>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x408>
 8001af6:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001afa:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001afc:	2104      	movs	r1, #4
 8001afe:	430a      	orrs	r2, r1
 8001b00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b02:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0x420>
 8001b10:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b14:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	438a      	bics	r2, r1
 8001b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b20:	4b84      	ldr	r3, [pc, #528]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b22:	2104      	movs	r1, #4
 8001b24:	438a      	bics	r2, r1
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f962 	bl	8000df8 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f95d 	bl	8000df8 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x634>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e136      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b79      	ldr	r3, [pc, #484]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x432>
 8001b58:	e013      	b.n	8001b82 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f94d 	bl	8000df8 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b62:	e009      	b.n	8001b78 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f948 	bl	8000df8 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	4a73      	ldr	r2, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x634>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e121      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b78:	4b6e      	ldr	r3, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b82:	231f      	movs	r3, #31
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001b92:	496b      	ldr	r1, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x638>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d039      	beq.n	8001c16 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	03c9      	lsls	r1, r1, #15
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f91e 	bl	8000df8 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f919 	bl	8000df8 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0f3      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4ba>
 8001be0:	e019      	b.n	8001c16 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001be2:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001be8:	4956      	ldr	r1, [pc, #344]	; (8001d44 <HAL_RCC_OscConfig+0x63c>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff f903 	bl	8000df8 <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf8:	f7ff f8fe 	bl	8000df8 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0d8      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d100      	bne.n	8001c20 <HAL_RCC_OscConfig+0x518>
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c20:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2238      	movs	r2, #56	; 0x38
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d100      	bne.n	8001c2e <HAL_RCC_OscConfig+0x526>
 8001c2c:	e07b      	b.n	8001d26 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d156      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c3c:	4942      	ldr	r1, [pc, #264]	; (8001d48 <HAL_RCC_OscConfig+0x640>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f8d9 	bl	8000df8 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f8d4 	bl	8000df8 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0ae      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5e:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	049b      	lsls	r3, r3, #18
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x644>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	431a      	orrs	r2, r3
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0449      	lsls	r1, r1, #17
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0549      	lsls	r1, r1, #21
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f89d 	bl	8000df8 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f898 	bl	8000df8 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e072      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	049b      	lsls	r3, r3, #18
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x5bc>
 8001ce2:	e06a      	b.n	8001dba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001cea:	4917      	ldr	r1, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x640>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f882 	bl	8000df8 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f87d 	bl	8000df8 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e057      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	049b      	lsls	r3, r3, #18
 8001d14:	4013      	ands	r3, r2
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_OscConfig+0x62c>)
 8001d1e:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x648>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	e049      	b.n	8001dba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e044      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	00001388 	.word	0x00001388
 8001d40:	efffffff 	.word	0xefffffff
 8001d44:	ffbfffff 	.word	0xffbfffff
 8001d48:	feffffff 	.word	0xfeffffff
 8001d4c:	11c1808c 	.word	0x11c1808c
 8001d50:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x6bc>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d126      	bne.n	8001db6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2270      	movs	r2, #112	; 0x70
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11f      	bne.n	8001db6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	23fe      	movs	r3, #254	; 0xfe
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d116      	bne.n	8001db6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	23f8      	movs	r3, #248	; 0xf8
 8001d8c:	039b      	lsls	r3, r3, #14
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d10e      	bne.n	8001db6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	23e0      	movs	r3, #224	; 0xe0
 8001d9c:	051b      	lsls	r3, r3, #20
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	0f5b      	lsrs	r3, r3, #29
 8001dac:	075a      	lsls	r2, r3, #29
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b008      	add	sp, #32
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0e9      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2207      	movs	r2, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d91e      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dfc:	f7fe fffc 	bl	8000df8 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e04:	e009      	b.n	8001e1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7fe fff7 	bl	8000df8 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_RCC_ClockConfig+0x1f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0ca      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	4013      	ands	r3, r2
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2204      	movs	r2, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d006      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e3c:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	21e0      	movs	r1, #224	; 0xe0
 8001e44:	01c9      	lsls	r1, r1, #7
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d057      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e097      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	049b      	lsls	r3, r3, #18
 8001e90:	4013      	ands	r3, r2
 8001e92:	d11f      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e08b      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d113      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e07f      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e074      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e06d      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2207      	movs	r2, #7
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee8:	f7fe ff86 	bl	8000df8 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef0:	e009      	b.n	8001f06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef2:	f7fe ff81 	bl	8000df8 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_RCC_ClockConfig+0x1f4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e054      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	; 0x38
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1ec      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	4013      	ands	r3, r2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d21e      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f38:	f7fe ff5e 	bl	8000df8 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f42:	f7fe ff59 	bl	8000df8 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <HAL_RCC_ClockConfig+0x1f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e02c      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_RCC_ClockConfig+0x200>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f82:	f000 f829 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f86:	0001      	movs	r1, r0
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	220f      	movs	r2, #15
 8001f90:	401a      	ands	r2, r3
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x204>)
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	58d3      	ldr	r3, [r2, r3]
 8001f98:	221f      	movs	r2, #31
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	000a      	movs	r2, r1
 8001f9e:	40da      	lsrs	r2, r3
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x208>)
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x20c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7fe fec9 	bl	8000d40 <HAL_InitTick>
 8001fae:	0003      	movs	r3, r0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	fffff0ff 	.word	0xfffff0ff
 8001fc8:	ffff8fff 	.word	0xffff8fff
 8001fcc:	08004a10 	.word	0x08004a10
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2238      	movs	r2, #56	; 0x38
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d10f      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0adb      	lsrs	r3, r3, #11
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	4835      	ldr	r0, [pc, #212]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ffe:	f7fe f883 	bl	8000108 <__udivsi3>
 8002002:	0003      	movs	r3, r0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e05d      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2238      	movs	r2, #56	; 0x38
 800200e:	4013      	ands	r3, r2
 8002010:	2b08      	cmp	r3, #8
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e054      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	; 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	2b10      	cmp	r3, #16
 8002024:	d138      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002026:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2203      	movs	r2, #3
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	2207      	movs	r2, #7
 8002038:	4013      	ands	r3, r2
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4824      	ldr	r0, [pc, #144]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002048:	f7fe f85e 	bl	8000108 <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	0019      	movs	r1, r3
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	227f      	movs	r2, #127	; 0x7f
 8002058:	4013      	ands	r3, r2
 800205a:	434b      	muls	r3, r1
 800205c:	617b      	str	r3, [r7, #20]
        break;
 800205e:	e00d      	b.n	800207c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	481c      	ldr	r0, [pc, #112]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002064:	f7fe f850 	bl	8000108 <__udivsi3>
 8002068:	0003      	movs	r3, r0
 800206a:	0019      	movs	r1, r3
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	227f      	movs	r2, #127	; 0x7f
 8002074:	4013      	ands	r3, r2
 8002076:	434b      	muls	r3, r1
 8002078:	617b      	str	r3, [r7, #20]
        break;
 800207a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0f5b      	lsrs	r3, r3, #29
 8002082:	2207      	movs	r2, #7
 8002084:	4013      	ands	r3, r2
 8002086:	3301      	adds	r3, #1
 8002088:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	6978      	ldr	r0, [r7, #20]
 800208e:	f7fe f83b 	bl	8000108 <__udivsi3>
 8002092:	0003      	movs	r3, r0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e015      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2238      	movs	r2, #56	; 0x38
 800209e:	4013      	ands	r3, r2
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d103      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2238      	movs	r2, #56	; 0x38
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b18      	cmp	r3, #24
 80020b6:	d103      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020b8:	23fa      	movs	r3, #250	; 0xfa
 80020ba:	01db      	lsls	r3, r3, #7
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e001      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b006      	add	sp, #24
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	007a1200 	.word	0x007a1200

080020dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_RCC_GetHCLKFreq+0x10>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020f4:	f7ff fff2 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020f8:	0004      	movs	r4, r0
 80020fa:	f7ff faf9 	bl	80016f0 <LL_RCC_GetAPB1Prescaler>
 80020fe:	0003      	movs	r3, r0
 8002100:	0b1a      	lsrs	r2, r3, #12
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	58d3      	ldr	r3, [r2, r3]
 8002108:	221f      	movs	r2, #31
 800210a:	4013      	ands	r3, r2
 800210c:	40dc      	lsrs	r4, r3
 800210e:	0023      	movs	r3, r4
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	08004a50 	.word	0x08004a50

0800211c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002124:	2313      	movs	r3, #19
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800212c:	2312      	movs	r3, #18
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002140:	e0ad      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2011      	movs	r0, #17
 8002144:	183b      	adds	r3, r7, r0
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800214c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	4013      	ands	r3, r2
 8002154:	d110      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0549      	lsls	r1, r1, #21
 8002160:	430a      	orrs	r2, r1
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	055b      	lsls	r3, r3, #21
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	183b      	adds	r3, r7, r0
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	0049      	lsls	r1, r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002186:	f7fe fe37 	bl	8000df8 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800218e:	e00b      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7fe fe32 	bl	8000df8 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d904      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800219e:	2313      	movs	r3, #19
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2203      	movs	r2, #3
 80021a4:	701a      	strb	r2, [r3, #0]
        break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	d0ed      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021b4:	2313      	movs	r3, #19
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d15e      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d019      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d014      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0249      	lsls	r1, r1, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021f8:	491e      	ldr	r1, [pc, #120]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	d016      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fdf4 	bl	8000df8 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002214:	e00c      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fdef 	bl	8000df8 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d904      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002226:	2313      	movs	r3, #19
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	2203      	movs	r2, #3
 800222c:	701a      	strb	r2, [r3, #0]
            break;
 800222e:	e004      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	2202      	movs	r2, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d0ed      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800223a:	2313      	movs	r3, #19
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002254:	430a      	orrs	r2, r1
 8002256:	65da      	str	r2, [r3, #92]	; 0x5c
 8002258:	e016      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800225a:	2312      	movs	r3, #18
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2213      	movs	r2, #19
 8002260:	18ba      	adds	r2, r7, r2
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e00f      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	fffffcff 	.word	0xfffffcff
 8002274:	fffeffff 	.word	0xfffeffff
 8002278:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227c:	2312      	movs	r3, #18
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2213      	movs	r2, #19
 8002282:	18ba      	adds	r2, r7, r2
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002288:	2311      	movs	r3, #17
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4bb6      	ldr	r3, [pc, #728]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002296:	4bb5      	ldr	r3, [pc, #724]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002298:	49b5      	ldr	r1, [pc, #724]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800229a:	400a      	ands	r2, r1
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a8:	4bb0      	ldr	r3, [pc, #704]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	2203      	movs	r2, #3
 80022ae:	4393      	bics	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4bad      	ldr	r3, [pc, #692]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2202      	movs	r2, #2
 80022c2:	4013      	ands	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c6:	4ba9      	ldr	r3, [pc, #676]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	220c      	movs	r2, #12
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4ba5      	ldr	r3, [pc, #660]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022e4:	4ba1      	ldr	r3, [pc, #644]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	2230      	movs	r2, #48	; 0x30
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b9e      	ldr	r3, [pc, #632]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2210      	movs	r2, #16
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002302:	4b9a      	ldr	r3, [pc, #616]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	4a9b      	ldr	r2, [pc, #620]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	4b96      	ldr	r3, [pc, #600]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002312:	430a      	orrs	r2, r1
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	015b      	lsls	r3, r3, #5
 800231e:	4013      	ands	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002322:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	4a94      	ldr	r2, [pc, #592]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	4b8e      	ldr	r3, [pc, #568]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	430a      	orrs	r2, r1
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b8a      	ldr	r3, [pc, #552]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	4a8d      	ldr	r2, [pc, #564]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4013      	ands	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002362:	4b82      	ldr	r3, [pc, #520]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	4a86      	ldr	r2, [pc, #536]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002370:	4b7e      	ldr	r3, [pc, #504]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002372:	430a      	orrs	r2, r1
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2220      	movs	r2, #32
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002380:	4b7a      	ldr	r3, [pc, #488]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	4a7f      	ldr	r2, [pc, #508]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	4b77      	ldr	r3, [pc, #476]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002390:	430a      	orrs	r2, r1
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	4013      	ands	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	4a79      	ldr	r2, [pc, #484]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	d015      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023be:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	0899      	lsrs	r1, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023dc:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	0249      	lsls	r1, r1, #9
 80023e6:	430a      	orrs	r2, r1
 80023e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	031b      	lsls	r3, r3, #12
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	4393      	bics	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002406:	430a      	orrs	r2, r1
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	039b      	lsls	r3, r3, #14
 8002412:	4013      	ands	r3, r2
 8002414:	d016      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002416:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a5c      	ldr	r2, [pc, #368]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002424:	4b51      	ldr	r3, [pc, #324]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	03db      	lsls	r3, r3, #15
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002436:	4b4d      	ldr	r3, [pc, #308]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0449      	lsls	r1, r1, #17
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	03db      	lsls	r3, r3, #15
 800244c:	4013      	ands	r3, r2
 800244e:	d016      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002460:	430a      	orrs	r2, r1
 8002462:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	045b      	lsls	r3, r3, #17
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	0449      	lsls	r1, r1, #17
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4013      	ands	r3, r2
 8002488:	d014      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	2203      	movs	r2, #3
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249a:	430a      	orrs	r2, r1
 800249c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d106      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0249      	lsls	r1, r1, #9
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	019b      	lsls	r3, r3, #6
 80024bc:	4013      	ands	r3, r2
 80024be:	d014      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	220c      	movs	r2, #12
 80024c6:	4393      	bics	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d106      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0249      	lsls	r1, r1, #9
 80024e6:	430a      	orrs	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	045b      	lsls	r3, r3, #17
 80024f2:	4013      	ands	r3, r2
 80024f4:	d016      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002506:	430a      	orrs	r2, r1
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0449      	lsls	r1, r1, #17
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	4013      	ands	r3, r2
 800252e:	d016      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002540:	430a      	orrs	r2, r1
 8002542:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	0449      	lsls	r1, r1, #17
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800255e:	2312      	movs	r3, #18
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	efffffff 	.word	0xefffffff
 8002574:	fffff3ff 	.word	0xfffff3ff
 8002578:	fffffcff 	.word	0xfffffcff
 800257c:	fff3ffff 	.word	0xfff3ffff
 8002580:	ffcfffff 	.word	0xffcfffff
 8002584:	ffffcfff 	.word	0xffffcfff
 8002588:	ffff3fff 	.word	0xffff3fff
 800258c:	ffbfffff 	.word	0xffbfffff
 8002590:	feffffff 	.word	0xfeffffff

08002594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e046      	b.n	8002634 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2288      	movs	r2, #136	; 0x88
 80025aa:	589b      	ldr	r3, [r3, r2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2284      	movs	r2, #132	; 0x84
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7fe fa9a 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2288      	movs	r2, #136	; 0x88
 80025c4:	2124      	movs	r1, #36	; 0x24
 80025c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	438a      	bics	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 ffce 	bl	8003584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fc74 	bl	8002ed8 <UART_SetConfig>
 80025f0:	0003      	movs	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01c      	b.n	8002634 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	490d      	ldr	r1, [pc, #52]	; (800263c <HAL_UART_Init+0xa8>)
 8002606:	400a      	ands	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	212a      	movs	r1, #42	; 0x2a
 8002616:	438a      	bics	r2, r1
 8002618:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f001 f85d 	bl	80036ec <UART_CheckIdleState>
 8002632:	0003      	movs	r3, r0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}
 800263c:	ffffb7ff 	.word	0xffffb7ff

08002640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	1dbb      	adds	r3, r7, #6
 800264e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2288      	movs	r2, #136	; 0x88
 8002654:	589b      	ldr	r3, [r3, r2]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d000      	beq.n	800265c <HAL_UART_Transmit+0x1c>
 800265a:	e090      	b.n	800277e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_UART_Transmit+0x2a>
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e088      	b.n	8002780 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <HAL_UART_Transmit+0x4e>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d001      	beq.n	800268e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e078      	b.n	8002780 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2290      	movs	r2, #144	; 0x90
 8002692:	2100      	movs	r1, #0
 8002694:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2288      	movs	r2, #136	; 0x88
 800269a:	2121      	movs	r1, #33	; 0x21
 800269c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800269e:	f7fe fbab 	bl	8000df8 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1dba      	adds	r2, r7, #6
 80026aa:	2154      	movs	r1, #84	; 0x54
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1dba      	adds	r2, r7, #6
 80026b4:	2156      	movs	r1, #86	; 0x56
 80026b6:	8812      	ldrh	r2, [r2, #0]
 80026b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d108      	bne.n	80026d8 <HAL_UART_Transmit+0x98>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e003      	b.n	80026e0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e0:	e030      	b.n	8002744 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	0013      	movs	r3, r2
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	f001 f8a6 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d005      	beq.n	8002704 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2288      	movs	r2, #136	; 0x88
 80026fc:	2120      	movs	r1, #32
 80026fe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e03d      	b.n	8002780 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	001a      	movs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	05d2      	lsls	r2, r2, #23
 8002716:	0dd2      	lsrs	r2, r2, #23
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3302      	adds	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	e007      	b.n	8002732 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3301      	adds	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2256      	movs	r2, #86	; 0x56
 8002736:	5a9b      	ldrh	r3, [r3, r2]
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b299      	uxth	r1, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2256      	movs	r2, #86	; 0x56
 8002742:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2256      	movs	r2, #86	; 0x56
 8002748:	5a9b      	ldrh	r3, [r3, r2]
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1c8      	bne.n	80026e2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	0013      	movs	r3, r2
 800275a:	2200      	movs	r2, #0
 800275c:	2140      	movs	r1, #64	; 0x40
 800275e:	f001 f86f 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d005      	beq.n	8002772 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2288      	movs	r2, #136	; 0x88
 800276a:	2120      	movs	r1, #32
 800276c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e006      	b.n	8002780 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2288      	movs	r2, #136	; 0x88
 8002776:	2120      	movs	r1, #32
 8002778:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b008      	add	sp, #32
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	228c      	movs	r2, #140	; 0x8c
 800279a:	589b      	ldr	r3, [r3, r2]
 800279c:	2b20      	cmp	r3, #32
 800279e:	d14f      	bne.n	8002840 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_UART_Receive_IT+0x26>
 80027a6:	1dbb      	adds	r3, r7, #6
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e047      	b.n	8002842 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d109      	bne.n	80027d2 <HAL_UART_Receive_IT+0x4a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d001      	beq.n	80027d2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e037      	b.n	8002842 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_UART_Receive_IT+0xc4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d025      	beq.n	800282e <HAL_UART_Receive_IT+0xa6>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_UART_Receive_IT+0xc8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d020      	beq.n	800282e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	4013      	ands	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fa:	f3ef 8310 	mrs	r3, PRIMASK
 80027fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002800:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	2301      	movs	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f383 8810 	msr	PRIMASK, r3
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	04c9      	lsls	r1, r1, #19
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f383 8810 	msr	PRIMASK, r3
}
 800282c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0018      	movs	r0, r3
 8002838:	f001 f872 	bl	8003920 <UART_Start_Receive_IT>
 800283c:	0003      	movs	r3, r0
 800283e:	e000      	b.n	8002842 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b008      	add	sp, #32
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40008000 	.word	0x40008000
 8002850:	40008400 	.word	0x40008400

08002854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b0aa      	sub	sp, #168	; 0xa8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	22a4      	movs	r2, #164	; 0xa4
 8002864:	18b9      	adds	r1, r7, r2
 8002866:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	20a0      	movs	r0, #160	; 0xa0
 8002870:	1839      	adds	r1, r7, r0
 8002872:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	249c      	movs	r4, #156	; 0x9c
 800287c:	1939      	adds	r1, r7, r4
 800287e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002880:	0011      	movs	r1, r2
 8002882:	18bb      	adds	r3, r7, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4aa2      	ldr	r2, [pc, #648]	; (8002b10 <HAL_UART_IRQHandler+0x2bc>)
 8002888:	4013      	ands	r3, r2
 800288a:	2298      	movs	r2, #152	; 0x98
 800288c:	18bd      	adds	r5, r7, r2
 800288e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002890:	18bb      	adds	r3, r7, r2
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11a      	bne.n	80028ce <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002898:	187b      	adds	r3, r7, r1
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	4013      	ands	r3, r2
 80028a0:	d015      	beq.n	80028ce <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2220      	movs	r2, #32
 80028a8:	4013      	ands	r3, r2
 80028aa:	d105      	bne.n	80028b8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	055b      	lsls	r3, r3, #21
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00a      	beq.n	80028ce <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d100      	bne.n	80028c2 <HAL_UART_IRQHandler+0x6e>
 80028c0:	e2dc      	b.n	8002e7c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	0010      	movs	r0, r2
 80028ca:	4798      	blx	r3
      }
      return;
 80028cc:	e2d6      	b.n	8002e7c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028ce:	2398      	movs	r3, #152	; 0x98
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d100      	bne.n	80028da <HAL_UART_IRQHandler+0x86>
 80028d8:	e122      	b.n	8002b20 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028da:	239c      	movs	r3, #156	; 0x9c
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8c      	ldr	r2, [pc, #560]	; (8002b14 <HAL_UART_IRQHandler+0x2c0>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80028e6:	23a0      	movs	r3, #160	; 0xa0
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <HAL_UART_IRQHandler+0x2c4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	d100      	bne.n	80028f4 <HAL_UART_IRQHandler+0xa0>
 80028f2:	e115      	b.n	8002b20 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028f4:	23a4      	movs	r3, #164	; 0xa4
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d012      	beq.n	8002926 <HAL_UART_IRQHandler+0xd2>
 8002900:	23a0      	movs	r3, #160	; 0xa0
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d00b      	beq.n	8002926 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2290      	movs	r2, #144	; 0x90
 800291a:	589b      	ldr	r3, [r3, r2]
 800291c:	2201      	movs	r2, #1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2190      	movs	r1, #144	; 0x90
 8002924:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002926:	23a4      	movs	r3, #164	; 0xa4
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2202      	movs	r2, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d011      	beq.n	8002956 <HAL_UART_IRQHandler+0x102>
 8002932:	239c      	movs	r3, #156	; 0x9c
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d00b      	beq.n	8002956 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2202      	movs	r2, #2
 8002944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2290      	movs	r2, #144	; 0x90
 800294a:	589b      	ldr	r3, [r3, r2]
 800294c:	2204      	movs	r2, #4
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2190      	movs	r1, #144	; 0x90
 8002954:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002956:	23a4      	movs	r3, #164	; 0xa4
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	d011      	beq.n	8002986 <HAL_UART_IRQHandler+0x132>
 8002962:	239c      	movs	r3, #156	; 0x9c
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d00b      	beq.n	8002986 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2204      	movs	r2, #4
 8002974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2290      	movs	r2, #144	; 0x90
 800297a:	589b      	ldr	r3, [r3, r2]
 800297c:	2202      	movs	r2, #2
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2190      	movs	r1, #144	; 0x90
 8002984:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002986:	23a4      	movs	r3, #164	; 0xa4
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	d017      	beq.n	80029c2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002992:	23a0      	movs	r3, #160	; 0xa0
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2220      	movs	r2, #32
 800299a:	4013      	ands	r3, r2
 800299c:	d105      	bne.n	80029aa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800299e:	239c      	movs	r3, #156	; 0x9c
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5b      	ldr	r2, [pc, #364]	; (8002b14 <HAL_UART_IRQHandler+0x2c0>)
 80029a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029a8:	d00b      	beq.n	80029c2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2208      	movs	r2, #8
 80029b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2290      	movs	r2, #144	; 0x90
 80029b6:	589b      	ldr	r3, [r3, r2]
 80029b8:	2208      	movs	r2, #8
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2190      	movs	r1, #144	; 0x90
 80029c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029c2:	23a4      	movs	r3, #164	; 0xa4
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4013      	ands	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_UART_IRQHandler+0x1a4>
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	04db      	lsls	r3, r3, #19
 80029da:	4013      	ands	r3, r2
 80029dc:	d00c      	beq.n	80029f8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2290      	movs	r2, #144	; 0x90
 80029ec:	589b      	ldr	r3, [r3, r2]
 80029ee:	2220      	movs	r2, #32
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2190      	movs	r1, #144	; 0x90
 80029f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2290      	movs	r2, #144	; 0x90
 80029fc:	589b      	ldr	r3, [r3, r2]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d100      	bne.n	8002a04 <HAL_UART_IRQHandler+0x1b0>
 8002a02:	e23d      	b.n	8002e80 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a04:	23a4      	movs	r3, #164	; 0xa4
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d015      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a10:	23a0      	movs	r3, #160	; 0xa0
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2220      	movs	r2, #32
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d106      	bne.n	8002a2a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a1c:	239c      	movs	r3, #156	; 0x9c
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	055b      	lsls	r3, r3, #21
 8002a26:	4013      	ands	r3, r2
 8002a28:	d008      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	0010      	movs	r0, r2
 8002a3a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2290      	movs	r2, #144	; 0x90
 8002a40:	589b      	ldr	r3, [r3, r2]
 8002a42:	2194      	movs	r1, #148	; 0x94
 8002a44:	187a      	adds	r2, r7, r1
 8002a46:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d004      	beq.n	8002a60 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2228      	movs	r2, #40	; 0x28
 8002a5c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a5e:	d04c      	beq.n	8002afa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f001 f880 	bl	8003b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d13c      	bne.n	8002af0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a76:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7e:	2090      	movs	r0, #144	; 0x90
 8002a80:	183a      	adds	r2, r7, r0
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d016      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	589b      	ldr	r3, [r3, r2]
 8002abe:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_UART_IRQHandler+0x2c8>)
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	589b      	ldr	r3, [r3, r2]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fe fadd 	bl	8001088 <HAL_DMA_Abort_IT>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d01c      	beq.n	8002b0c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	589b      	ldr	r3, [r3, r2]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	5852      	ldr	r2, [r2, r1]
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e012      	b.n	8002b0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f9e1 	bl	8002eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	e00d      	b.n	8002b0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f9dc 	bl	8002eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	e008      	b.n	8002b0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 f9d7 	bl	8002eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2290      	movs	r2, #144	; 0x90
 8002b06:	2100      	movs	r1, #0
 8002b08:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b0a:	e1b9      	b.n	8002e80 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	46c0      	nop			; (mov r8, r8)
    return;
 8002b0e:	e1b7      	b.n	8002e80 <HAL_UART_IRQHandler+0x62c>
 8002b10:	0000080f 	.word	0x0000080f
 8002b14:	10000001 	.word	0x10000001
 8002b18:	04000120 	.word	0x04000120
 8002b1c:	08003c35 	.word	0x08003c35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d000      	beq.n	8002b2a <HAL_UART_IRQHandler+0x2d6>
 8002b28:	e13e      	b.n	8002da8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b2a:	23a4      	movs	r3, #164	; 0xa4
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	4013      	ands	r3, r2
 8002b34:	d100      	bne.n	8002b38 <HAL_UART_IRQHandler+0x2e4>
 8002b36:	e137      	b.n	8002da8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b38:	23a0      	movs	r3, #160	; 0xa0
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	4013      	ands	r3, r2
 8002b42:	d100      	bne.n	8002b46 <HAL_UART_IRQHandler+0x2f2>
 8002b44:	e130      	b.n	8002da8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d000      	beq.n	8002b5e <HAL_UART_IRQHandler+0x30a>
 8002b5c:	e0a4      	b.n	8002ca8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	589b      	ldr	r3, [r3, r2]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	217e      	movs	r1, #126	; 0x7e
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <HAL_UART_IRQHandler+0x324>
 8002b76:	e185      	b.n	8002e84 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	225c      	movs	r2, #92	; 0x5c
 8002b7c:	5a9b      	ldrh	r3, [r3, r2]
 8002b7e:	187a      	adds	r2, r7, r1
 8002b80:	8812      	ldrh	r2, [r2, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d300      	bcc.n	8002b88 <HAL_UART_IRQHandler+0x334>
 8002b86:	e17d      	b.n	8002e84 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	187a      	adds	r2, r7, r1
 8002b8c:	215e      	movs	r1, #94	; 0x5e
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	589b      	ldr	r3, [r3, r2]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d170      	bne.n	8002c84 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002baa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bac:	2301      	movs	r3, #1
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	49b4      	ldr	r1, [pc, #720]	; (8002e94 <HAL_UART_IRQHandler+0x640>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	677b      	str	r3, [r7, #116]	; 0x74
 8002bde:	2301      	movs	r3, #1
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c06:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c10:	2301      	movs	r3, #1
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	438a      	bics	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	228c      	movs	r2, #140	; 0x8c
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c46:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c50:	2301      	movs	r3, #1
 8002c52:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	f383 8810 	msr	PRIMASK, r3
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2110      	movs	r1, #16
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	589b      	ldr	r3, [r3, r2]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7fe f9a2 	bl	8000fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	225c      	movs	r2, #92	; 0x5c
 8002c8e:	5a9a      	ldrh	r2, [r3, r2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	215e      	movs	r1, #94	; 0x5e
 8002c94:	5a5b      	ldrh	r3, [r3, r1]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f90d 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ca6:	e0ed      	b.n	8002e84 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	225c      	movs	r2, #92	; 0x5c
 8002cac:	5a99      	ldrh	r1, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	225e      	movs	r2, #94	; 0x5e
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	208e      	movs	r0, #142	; 0x8e
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	1a8a      	subs	r2, r1, r2
 8002cbc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	225e      	movs	r2, #94	; 0x5e
 8002cc2:	5a9b      	ldrh	r3, [r3, r2]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d100      	bne.n	8002ccc <HAL_UART_IRQHandler+0x478>
 8002cca:	e0dd      	b.n	8002e88 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d100      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x482>
 8002cd4:	e0d8      	b.n	8002e88 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cde:	2488      	movs	r4, #136	; 0x88
 8002ce0:	193a      	adds	r2, r7, r4
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f383 8810 	msr	PRIMASK, r3
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4967      	ldr	r1, [pc, #412]	; (8002e98 <HAL_UART_IRQHandler+0x644>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d12:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d14:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d16:	2484      	movs	r4, #132	; 0x84
 8002d18:	193a      	adds	r2, r7, r4
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	495a      	ldr	r1, [pc, #360]	; (8002e9c <HAL_UART_IRQHandler+0x648>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	228c      	movs	r2, #140	; 0x8c
 8002d4a:	2120      	movs	r1, #32
 8002d4c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d62:	2480      	movs	r4, #128	; 0x80
 8002d64:	193a      	adds	r2, r7, r4
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2110      	movs	r1, #16
 8002d80:	438a      	bics	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	f383 8810 	msr	PRIMASK, r3
}
 8002d90:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 f88d 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da6:	e06f      	b.n	8002e88 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002da8:	23a4      	movs	r3, #164	; 0xa4
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	035b      	lsls	r3, r3, #13
 8002db2:	4013      	ands	r3, r2
 8002db4:	d010      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x584>
 8002db6:	239c      	movs	r3, #156	; 0x9c
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	03db      	lsls	r3, r3, #15
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	0352      	lsls	r2, r2, #13
 8002dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f001 fc9f 	bl	8004714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dd6:	e05a      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002dd8:	23a4      	movs	r3, #164	; 0xa4
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	4013      	ands	r3, r2
 8002de2:	d016      	beq.n	8002e12 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002de4:	23a0      	movs	r3, #160	; 0xa0
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	4013      	ands	r3, r2
 8002dee:	d106      	bne.n	8002dfe <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002df0:	239c      	movs	r3, #156	; 0x9c
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d042      	beq.n	8002e8c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	4798      	blx	r3
    }
    return;
 8002e10:	e03c      	b.n	8002e8c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e12:	23a4      	movs	r3, #164	; 0xa4
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2240      	movs	r2, #64	; 0x40
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d00a      	beq.n	8002e34 <HAL_UART_IRQHandler+0x5e0>
 8002e1e:	23a0      	movs	r3, #160	; 0xa0
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	4013      	ands	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 ff18 	bl	8003c62 <UART_EndTransmit_IT>
    return;
 8002e32:	e02c      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e34:	23a4      	movs	r3, #164	; 0xa4
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <HAL_UART_IRQHandler+0x606>
 8002e42:	23a0      	movs	r3, #160	; 0xa0
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f001 fc6e 	bl	8004734 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e58:	e019      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e5a:	23a4      	movs	r3, #164	; 0xa4
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	045b      	lsls	r3, r3, #17
 8002e64:	4013      	ands	r3, r2
 8002e66:	d012      	beq.n	8002e8e <HAL_UART_IRQHandler+0x63a>
 8002e68:	23a0      	movs	r3, #160	; 0xa0
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0d      	bge.n	8002e8e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f001 fc55 	bl	8004724 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e7a:	e008      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	e006      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
    return;
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	e004      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	e002      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
      return;
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_IRQHandler+0x63a>
    return;
 8002e8c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b02a      	add	sp, #168	; 0xa8
 8002e92:	bdb0      	pop	{r4, r5, r7, pc}
 8002e94:	fffffeff 	.word	0xfffffeff
 8002e98:	fffffedf 	.word	0xfffffedf
 8002e9c:	effffffe 	.word	0xeffffffe

08002ea0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	000a      	movs	r2, r1
 8002eca:	1cbb      	adds	r3, r7, #2
 8002ecc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	b5b0      	push	{r4, r5, r7, lr}
 8002eda:	b090      	sub	sp, #64	; 0x40
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee0:	231a      	movs	r3, #26
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4ac1      	ldr	r2, [pc, #772]	; (8003210 <UART_SetConfig+0x338>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	430b      	orrs	r3, r1
 8002f18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4abc      	ldr	r2, [pc, #752]	; (8003214 <UART_SetConfig+0x33c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	0003      	movs	r3, r0
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4ab6      	ldr	r2, [pc, #728]	; (8003218 <UART_SetConfig+0x340>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <UART_SetConfig+0x80>
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4ab4      	ldr	r2, [pc, #720]	; (800321c <UART_SetConfig+0x344>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f54:	4313      	orrs	r3, r2
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4ab0      	ldr	r2, [pc, #704]	; (8003220 <UART_SetConfig+0x348>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	220f      	movs	r2, #15
 8002f76:	4393      	bics	r3, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	0003      	movs	r3, r0
 8002f84:	430b      	orrs	r3, r1
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4aa5      	ldr	r2, [pc, #660]	; (8003224 <UART_SetConfig+0x34c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d131      	bne.n	8002ff6 <UART_SetConfig+0x11e>
 8002f92:	4ba5      	ldr	r3, [pc, #660]	; (8003228 <UART_SetConfig+0x350>)
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	2203      	movs	r2, #3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d01d      	beq.n	8002fda <UART_SetConfig+0x102>
 8002f9e:	d823      	bhi.n	8002fe8 <UART_SetConfig+0x110>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00c      	beq.n	8002fbe <UART_SetConfig+0xe6>
 8002fa4:	d820      	bhi.n	8002fe8 <UART_SetConfig+0x110>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <UART_SetConfig+0xd8>
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00e      	beq.n	8002fcc <UART_SetConfig+0xf4>
 8002fae:	e01b      	b.n	8002fe8 <UART_SetConfig+0x110>
 8002fb0:	231b      	movs	r3, #27
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	19db      	adds	r3, r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e154      	b.n	8003268 <UART_SetConfig+0x390>
 8002fbe:	231b      	movs	r3, #27
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	189b      	adds	r3, r3, r2
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e14d      	b.n	8003268 <UART_SetConfig+0x390>
 8002fcc:	231b      	movs	r3, #27
 8002fce:	2220      	movs	r2, #32
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e146      	b.n	8003268 <UART_SetConfig+0x390>
 8002fda:	231b      	movs	r3, #27
 8002fdc:	2220      	movs	r2, #32
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	19db      	adds	r3, r3, r7
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e13f      	b.n	8003268 <UART_SetConfig+0x390>
 8002fe8:	231b      	movs	r3, #27
 8002fea:	2220      	movs	r2, #32
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e138      	b.n	8003268 <UART_SetConfig+0x390>
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a8c      	ldr	r2, [pc, #560]	; (800322c <UART_SetConfig+0x354>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d131      	bne.n	8003064 <UART_SetConfig+0x18c>
 8003000:	4b89      	ldr	r3, [pc, #548]	; (8003228 <UART_SetConfig+0x350>)
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	220c      	movs	r2, #12
 8003006:	4013      	ands	r3, r2
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d01d      	beq.n	8003048 <UART_SetConfig+0x170>
 800300c:	d823      	bhi.n	8003056 <UART_SetConfig+0x17e>
 800300e:	2b08      	cmp	r3, #8
 8003010:	d00c      	beq.n	800302c <UART_SetConfig+0x154>
 8003012:	d820      	bhi.n	8003056 <UART_SetConfig+0x17e>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <UART_SetConfig+0x146>
 8003018:	2b04      	cmp	r3, #4
 800301a:	d00e      	beq.n	800303a <UART_SetConfig+0x162>
 800301c:	e01b      	b.n	8003056 <UART_SetConfig+0x17e>
 800301e:	231b      	movs	r3, #27
 8003020:	2220      	movs	r2, #32
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e11d      	b.n	8003268 <UART_SetConfig+0x390>
 800302c:	231b      	movs	r3, #27
 800302e:	2220      	movs	r2, #32
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e116      	b.n	8003268 <UART_SetConfig+0x390>
 800303a:	231b      	movs	r3, #27
 800303c:	2220      	movs	r2, #32
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2204      	movs	r2, #4
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e10f      	b.n	8003268 <UART_SetConfig+0x390>
 8003048:	231b      	movs	r3, #27
 800304a:	2220      	movs	r2, #32
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2208      	movs	r2, #8
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e108      	b.n	8003268 <UART_SetConfig+0x390>
 8003056:	231b      	movs	r3, #27
 8003058:	2220      	movs	r2, #32
 800305a:	189b      	adds	r3, r3, r2
 800305c:	19db      	adds	r3, r3, r7
 800305e:	2210      	movs	r2, #16
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e101      	b.n	8003268 <UART_SetConfig+0x390>
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a71      	ldr	r2, [pc, #452]	; (8003230 <UART_SetConfig+0x358>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d131      	bne.n	80030d2 <UART_SetConfig+0x1fa>
 800306e:	4b6e      	ldr	r3, [pc, #440]	; (8003228 <UART_SetConfig+0x350>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	2230      	movs	r2, #48	; 0x30
 8003074:	4013      	ands	r3, r2
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d01d      	beq.n	80030b6 <UART_SetConfig+0x1de>
 800307a:	d823      	bhi.n	80030c4 <UART_SetConfig+0x1ec>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d00c      	beq.n	800309a <UART_SetConfig+0x1c2>
 8003080:	d820      	bhi.n	80030c4 <UART_SetConfig+0x1ec>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <UART_SetConfig+0x1b4>
 8003086:	2b10      	cmp	r3, #16
 8003088:	d00e      	beq.n	80030a8 <UART_SetConfig+0x1d0>
 800308a:	e01b      	b.n	80030c4 <UART_SetConfig+0x1ec>
 800308c:	231b      	movs	r3, #27
 800308e:	2220      	movs	r2, #32
 8003090:	189b      	adds	r3, r3, r2
 8003092:	19db      	adds	r3, r3, r7
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e0e6      	b.n	8003268 <UART_SetConfig+0x390>
 800309a:	231b      	movs	r3, #27
 800309c:	2220      	movs	r2, #32
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	19db      	adds	r3, r3, r7
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e0df      	b.n	8003268 <UART_SetConfig+0x390>
 80030a8:	231b      	movs	r3, #27
 80030aa:	2220      	movs	r2, #32
 80030ac:	189b      	adds	r3, r3, r2
 80030ae:	19db      	adds	r3, r3, r7
 80030b0:	2204      	movs	r2, #4
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e0d8      	b.n	8003268 <UART_SetConfig+0x390>
 80030b6:	231b      	movs	r3, #27
 80030b8:	2220      	movs	r2, #32
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	19db      	adds	r3, r3, r7
 80030be:	2208      	movs	r2, #8
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e0d1      	b.n	8003268 <UART_SetConfig+0x390>
 80030c4:	231b      	movs	r3, #27
 80030c6:	2220      	movs	r2, #32
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	19db      	adds	r3, r3, r7
 80030cc:	2210      	movs	r2, #16
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e0ca      	b.n	8003268 <UART_SetConfig+0x390>
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a57      	ldr	r2, [pc, #348]	; (8003234 <UART_SetConfig+0x35c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d106      	bne.n	80030ea <UART_SetConfig+0x212>
 80030dc:	231b      	movs	r3, #27
 80030de:	2220      	movs	r2, #32
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	19db      	adds	r3, r3, r7
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e0be      	b.n	8003268 <UART_SetConfig+0x390>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a52      	ldr	r2, [pc, #328]	; (8003238 <UART_SetConfig+0x360>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d106      	bne.n	8003102 <UART_SetConfig+0x22a>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e0b2      	b.n	8003268 <UART_SetConfig+0x390>
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4d      	ldr	r2, [pc, #308]	; (800323c <UART_SetConfig+0x364>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d106      	bne.n	800311a <UART_SetConfig+0x242>
 800310c:	231b      	movs	r3, #27
 800310e:	2220      	movs	r2, #32
 8003110:	189b      	adds	r3, r3, r2
 8003112:	19db      	adds	r3, r3, r7
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e0a6      	b.n	8003268 <UART_SetConfig+0x390>
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3e      	ldr	r2, [pc, #248]	; (8003218 <UART_SetConfig+0x340>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d13e      	bne.n	80031a2 <UART_SetConfig+0x2ca>
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <UART_SetConfig+0x350>)
 8003126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003128:	23c0      	movs	r3, #192	; 0xc0
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4013      	ands	r3, r2
 800312e:	22c0      	movs	r2, #192	; 0xc0
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <UART_SetConfig+0x2ae>
 8003136:	22c0      	movs	r2, #192	; 0xc0
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	4293      	cmp	r3, r2
 800313c:	d82a      	bhi.n	8003194 <UART_SetConfig+0x2bc>
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	4293      	cmp	r3, r2
 8003144:	d011      	beq.n	800316a <UART_SetConfig+0x292>
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	4293      	cmp	r3, r2
 800314c:	d822      	bhi.n	8003194 <UART_SetConfig+0x2bc>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <UART_SetConfig+0x284>
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	00d2      	lsls	r2, r2, #3
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <UART_SetConfig+0x2a0>
 800315a:	e01b      	b.n	8003194 <UART_SetConfig+0x2bc>
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e07e      	b.n	8003268 <UART_SetConfig+0x390>
 800316a:	231b      	movs	r3, #27
 800316c:	2220      	movs	r2, #32
 800316e:	189b      	adds	r3, r3, r2
 8003170:	19db      	adds	r3, r3, r7
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e077      	b.n	8003268 <UART_SetConfig+0x390>
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2204      	movs	r2, #4
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e070      	b.n	8003268 <UART_SetConfig+0x390>
 8003186:	231b      	movs	r3, #27
 8003188:	2220      	movs	r2, #32
 800318a:	189b      	adds	r3, r3, r2
 800318c:	19db      	adds	r3, r3, r7
 800318e:	2208      	movs	r2, #8
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e069      	b.n	8003268 <UART_SetConfig+0x390>
 8003194:	231b      	movs	r3, #27
 8003196:	2220      	movs	r2, #32
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	2210      	movs	r2, #16
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e062      	b.n	8003268 <UART_SetConfig+0x390>
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <UART_SetConfig+0x344>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d157      	bne.n	800325c <UART_SetConfig+0x384>
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <UART_SetConfig+0x350>)
 80031ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	22c0      	movs	r2, #192	; 0xc0
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d040      	beq.n	8003240 <UART_SetConfig+0x368>
 80031be:	22c0      	movs	r2, #192	; 0xc0
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d843      	bhi.n	800324e <UART_SetConfig+0x376>
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	0092      	lsls	r2, r2, #2
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d011      	beq.n	80031f2 <UART_SetConfig+0x31a>
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d83b      	bhi.n	800324e <UART_SetConfig+0x376>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <UART_SetConfig+0x30c>
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0052      	lsls	r2, r2, #1
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <UART_SetConfig+0x328>
 80031e2:	e034      	b.n	800324e <UART_SetConfig+0x376>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2220      	movs	r2, #32
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e03a      	b.n	8003268 <UART_SetConfig+0x390>
 80031f2:	231b      	movs	r3, #27
 80031f4:	2220      	movs	r2, #32
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e033      	b.n	8003268 <UART_SetConfig+0x390>
 8003200:	231b      	movs	r3, #27
 8003202:	2220      	movs	r2, #32
 8003204:	189b      	adds	r3, r3, r2
 8003206:	19db      	adds	r3, r3, r7
 8003208:	2204      	movs	r2, #4
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e02c      	b.n	8003268 <UART_SetConfig+0x390>
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	cfff69f3 	.word	0xcfff69f3
 8003214:	ffffcfff 	.word	0xffffcfff
 8003218:	40008000 	.word	0x40008000
 800321c:	40008400 	.word	0x40008400
 8003220:	11fff4ff 	.word	0x11fff4ff
 8003224:	40013800 	.word	0x40013800
 8003228:	40021000 	.word	0x40021000
 800322c:	40004400 	.word	0x40004400
 8003230:	40004800 	.word	0x40004800
 8003234:	40004c00 	.word	0x40004c00
 8003238:	40005000 	.word	0x40005000
 800323c:	40013c00 	.word	0x40013c00
 8003240:	231b      	movs	r3, #27
 8003242:	2220      	movs	r2, #32
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2208      	movs	r2, #8
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e00c      	b.n	8003268 <UART_SetConfig+0x390>
 800324e:	231b      	movs	r3, #27
 8003250:	2220      	movs	r2, #32
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2210      	movs	r2, #16
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e005      	b.n	8003268 <UART_SetConfig+0x390>
 800325c:	231b      	movs	r3, #27
 800325e:	2220      	movs	r2, #32
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2210      	movs	r2, #16
 8003266:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4ac1      	ldr	r2, [pc, #772]	; (8003574 <UART_SetConfig+0x69c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d005      	beq.n	800327e <UART_SetConfig+0x3a6>
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4ac0      	ldr	r2, [pc, #768]	; (8003578 <UART_SetConfig+0x6a0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d000      	beq.n	800327e <UART_SetConfig+0x3a6>
 800327c:	e093      	b.n	80033a6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327e:	231b      	movs	r3, #27
 8003280:	2220      	movs	r2, #32
 8003282:	189b      	adds	r3, r3, r2
 8003284:	19db      	adds	r3, r3, r7
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d015      	beq.n	80032b8 <UART_SetConfig+0x3e0>
 800328c:	dc18      	bgt.n	80032c0 <UART_SetConfig+0x3e8>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d00d      	beq.n	80032ae <UART_SetConfig+0x3d6>
 8003292:	dc15      	bgt.n	80032c0 <UART_SetConfig+0x3e8>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <UART_SetConfig+0x3c6>
 8003298:	2b02      	cmp	r3, #2
 800329a:	d005      	beq.n	80032a8 <UART_SetConfig+0x3d0>
 800329c:	e010      	b.n	80032c0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329e:	f7fe ff27 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80032a2:	0003      	movs	r3, r0
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032a6:	e014      	b.n	80032d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4bb4      	ldr	r3, [pc, #720]	; (800357c <UART_SetConfig+0x6a4>)
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032ac:	e011      	b.n	80032d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe fe93 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80032b2:	0003      	movs	r3, r0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032b6:	e00c      	b.n	80032d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032be:	e008      	b.n	80032d2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032c4:	231a      	movs	r3, #26
 80032c6:	2220      	movs	r2, #32
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
        break;
 80032d0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d100      	bne.n	80032da <UART_SetConfig+0x402>
 80032d8:	e135      	b.n	8003546 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032de:	4ba8      	ldr	r3, [pc, #672]	; (8003580 <UART_SetConfig+0x6a8>)
 80032e0:	0052      	lsls	r2, r2, #1
 80032e2:	5ad3      	ldrh	r3, [r2, r3]
 80032e4:	0019      	movs	r1, r3
 80032e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032e8:	f7fc ff0e 	bl	8000108 <__udivsi3>
 80032ec:	0003      	movs	r3, r0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	0013      	movs	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d305      	bcc.n	800330c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003308:	429a      	cmp	r2, r3
 800330a:	d906      	bls.n	800331a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800330c:	231a      	movs	r3, #26
 800330e:	2220      	movs	r2, #32
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e044      	b.n	80033a4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003326:	4b96      	ldr	r3, [pc, #600]	; (8003580 <UART_SetConfig+0x6a8>)
 8003328:	0052      	lsls	r2, r2, #1
 800332a:	5ad3      	ldrh	r3, [r2, r3]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	69b8      	ldr	r0, [r7, #24]
 8003338:	69f9      	ldr	r1, [r7, #28]
 800333a:	f7fd f85b 	bl	80003f4 <__aeabi_uldivmod>
 800333e:	0002      	movs	r2, r0
 8003340:	000b      	movs	r3, r1
 8003342:	0e11      	lsrs	r1, r2, #24
 8003344:	021d      	lsls	r5, r3, #8
 8003346:	430d      	orrs	r5, r1
 8003348:	0214      	lsls	r4, r2, #8
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68b8      	ldr	r0, [r7, #8]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	1900      	adds	r0, r0, r4
 800335c:	4169      	adcs	r1, r5
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f7fd f842 	bl	80003f4 <__aeabi_uldivmod>
 8003370:	0002      	movs	r2, r0
 8003372:	000b      	movs	r3, r1
 8003374:	0013      	movs	r3, r2
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	429a      	cmp	r2, r3
 8003380:	d309      	bcc.n	8003396 <UART_SetConfig+0x4be>
 8003382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	035b      	lsls	r3, r3, #13
 8003388:	429a      	cmp	r2, r3
 800338a:	d204      	bcs.n	8003396 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e006      	b.n	80033a4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003396:	231a      	movs	r3, #26
 8003398:	2220      	movs	r2, #32
 800339a:	189b      	adds	r3, r3, r2
 800339c:	19db      	adds	r3, r3, r7
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80033a2:	e0d0      	b.n	8003546 <UART_SetConfig+0x66e>
 80033a4:	e0cf      	b.n	8003546 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d000      	beq.n	80033b4 <UART_SetConfig+0x4dc>
 80033b2:	e070      	b.n	8003496 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80033b4:	231b      	movs	r3, #27
 80033b6:	2220      	movs	r2, #32
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d015      	beq.n	80033ee <UART_SetConfig+0x516>
 80033c2:	dc18      	bgt.n	80033f6 <UART_SetConfig+0x51e>
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00d      	beq.n	80033e4 <UART_SetConfig+0x50c>
 80033c8:	dc15      	bgt.n	80033f6 <UART_SetConfig+0x51e>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <UART_SetConfig+0x4fc>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d005      	beq.n	80033de <UART_SetConfig+0x506>
 80033d2:	e010      	b.n	80033f6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7fe fe8c 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80033d8:	0003      	movs	r3, r0
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033dc:	e014      	b.n	8003408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <UART_SetConfig+0x6a4>)
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e2:	e011      	b.n	8003408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e4:	f7fe fdf8 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80033e8:	0003      	movs	r3, r0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ec:	e00c      	b.n	8003408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033f4:	e008      	b.n	8003408 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033fa:	231a      	movs	r3, #26
 80033fc:	2220      	movs	r2, #32
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
        break;
 8003406:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d100      	bne.n	8003410 <UART_SetConfig+0x538>
 800340e:	e09a      	b.n	8003546 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003414:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <UART_SetConfig+0x6a8>)
 8003416:	0052      	lsls	r2, r2, #1
 8003418:	5ad3      	ldrh	r3, [r2, r3]
 800341a:	0019      	movs	r1, r3
 800341c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800341e:	f7fc fe73 	bl	8000108 <__udivsi3>
 8003422:	0003      	movs	r3, r0
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	18d2      	adds	r2, r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0019      	movs	r1, r3
 8003434:	0010      	movs	r0, r2
 8003436:	f7fc fe67 	bl	8000108 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	2b0f      	cmp	r3, #15
 8003442:	d921      	bls.n	8003488 <UART_SetConfig+0x5b0>
 8003444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	025b      	lsls	r3, r3, #9
 800344a:	429a      	cmp	r2, r3
 800344c:	d21c      	bcs.n	8003488 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	b29a      	uxth	r2, r3
 8003452:	200e      	movs	r0, #14
 8003454:	2420      	movs	r4, #32
 8003456:	1903      	adds	r3, r0, r4
 8003458:	19db      	adds	r3, r3, r7
 800345a:	210f      	movs	r1, #15
 800345c:	438a      	bics	r2, r1
 800345e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	2207      	movs	r2, #7
 8003468:	4013      	ands	r3, r2
 800346a:	b299      	uxth	r1, r3
 800346c:	1903      	adds	r3, r0, r4
 800346e:	19db      	adds	r3, r3, r7
 8003470:	1902      	adds	r2, r0, r4
 8003472:	19d2      	adds	r2, r2, r7
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1902      	adds	r2, r0, r4
 8003480:	19d2      	adds	r2, r2, r7
 8003482:	8812      	ldrh	r2, [r2, #0]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e05e      	b.n	8003546 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003488:	231a      	movs	r3, #26
 800348a:	2220      	movs	r2, #32
 800348c:	189b      	adds	r3, r3, r2
 800348e:	19db      	adds	r3, r3, r7
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e057      	b.n	8003546 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003496:	231b      	movs	r3, #27
 8003498:	2220      	movs	r2, #32
 800349a:	189b      	adds	r3, r3, r2
 800349c:	19db      	adds	r3, r3, r7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d015      	beq.n	80034d0 <UART_SetConfig+0x5f8>
 80034a4:	dc18      	bgt.n	80034d8 <UART_SetConfig+0x600>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00d      	beq.n	80034c6 <UART_SetConfig+0x5ee>
 80034aa:	dc15      	bgt.n	80034d8 <UART_SetConfig+0x600>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <UART_SetConfig+0x5de>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d005      	beq.n	80034c0 <UART_SetConfig+0x5e8>
 80034b4:	e010      	b.n	80034d8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b6:	f7fe fe1b 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80034ba:	0003      	movs	r3, r0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034be:	e014      	b.n	80034ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <UART_SetConfig+0x6a4>)
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034c4:	e011      	b.n	80034ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7fe fd87 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80034ca:	0003      	movs	r3, r0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ce:	e00c      	b.n	80034ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d6:	e008      	b.n	80034ea <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034dc:	231a      	movs	r3, #26
 80034de:	2220      	movs	r2, #32
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
        break;
 80034e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02a      	beq.n	8003546 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <UART_SetConfig+0x6a8>)
 80034f6:	0052      	lsls	r2, r2, #1
 80034f8:	5ad3      	ldrh	r3, [r2, r3]
 80034fa:	0019      	movs	r1, r3
 80034fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034fe:	f7fc fe03 	bl	8000108 <__udivsi3>
 8003502:	0003      	movs	r3, r0
 8003504:	001a      	movs	r2, r3
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	18d2      	adds	r2, r2, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0019      	movs	r1, r3
 8003514:	0010      	movs	r0, r2
 8003516:	f7fc fdf7 	bl	8000108 <__udivsi3>
 800351a:	0003      	movs	r3, r0
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d90a      	bls.n	800353a <UART_SetConfig+0x662>
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	025b      	lsls	r3, r3, #9
 800352a:	429a      	cmp	r2, r3
 800352c:	d205      	bcs.n	800353a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	b29a      	uxth	r2, r3
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e005      	b.n	8003546 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	231a      	movs	r3, #26
 800353c:	2220      	movs	r2, #32
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	226a      	movs	r2, #106	; 0x6a
 800354a:	2101      	movs	r1, #1
 800354c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	2268      	movs	r2, #104	; 0x68
 8003552:	2101      	movs	r1, #1
 8003554:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2200      	movs	r2, #0
 800355a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2200      	movs	r2, #0
 8003560:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003562:	231a      	movs	r3, #26
 8003564:	2220      	movs	r2, #32
 8003566:	189b      	adds	r3, r3, r2
 8003568:	19db      	adds	r3, r3, r7
 800356a:	781b      	ldrb	r3, [r3, #0]
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b010      	add	sp, #64	; 0x40
 8003572:	bdb0      	pop	{r4, r5, r7, pc}
 8003574:	40008000 	.word	0x40008000
 8003578:	40008400 	.word	0x40008400
 800357c:	00f42400 	.word	0x00f42400
 8003580:	08004a70 	.word	0x08004a70

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2208      	movs	r2, #8
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <UART_AdvFeatureConfig+0x144>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	2201      	movs	r2, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a43      	ldr	r2, [pc, #268]	; (80036cc <UART_AdvFeatureConfig+0x148>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	2202      	movs	r2, #2
 80035d6:	4013      	ands	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <UART_AdvFeatureConfig+0x14c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2204      	movs	r2, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	d00b      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <UART_AdvFeatureConfig+0x150>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2210      	movs	r2, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d00b      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <UART_AdvFeatureConfig+0x154>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <UART_AdvFeatureConfig+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	d01d      	beq.n	800369e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <UART_AdvFeatureConfig+0x15c>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	429a      	cmp	r2, r3
 8003684:	d10b      	bne.n	800369e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <UART_AdvFeatureConfig+0x160>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <UART_AdvFeatureConfig+0x164>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	ffff7fff 	.word	0xffff7fff
 80036cc:	fffdffff 	.word	0xfffdffff
 80036d0:	fffeffff 	.word	0xfffeffff
 80036d4:	fffbffff 	.word	0xfffbffff
 80036d8:	ffffefff 	.word	0xffffefff
 80036dc:	ffffdfff 	.word	0xffffdfff
 80036e0:	ffefffff 	.word	0xffefffff
 80036e4:	ff9fffff 	.word	0xff9fffff
 80036e8:	fff7ffff 	.word	0xfff7ffff

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b092      	sub	sp, #72	; 0x48
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2290      	movs	r2, #144	; 0x90
 80036f8:	2100      	movs	r1, #0
 80036fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd fb7c 	bl	8000df8 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2208      	movs	r2, #8
 800370c:	4013      	ands	r3, r2
 800370e:	2b08      	cmp	r3, #8
 8003710:	d12d      	bne.n	800376e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0391      	lsls	r1, r2, #14
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4a47      	ldr	r2, [pc, #284]	; (8003838 <UART_CheckIdleState+0x14c>)
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f88e 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d022      	beq.n	800376e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003730:	63bb      	str	r3, [r7, #56]	; 0x38
 8003732:	2301      	movs	r3, #1
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	438a      	bics	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2288      	movs	r2, #136	; 0x88
 800375e:	2120      	movs	r1, #32
 8003760:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2284      	movs	r2, #132	; 0x84
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e060      	b.n	8003830 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2204      	movs	r2, #4
 8003776:	4013      	ands	r3, r2
 8003778:	2b04      	cmp	r3, #4
 800377a:	d146      	bne.n	800380a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	03d1      	lsls	r1, r2, #15
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <UART_CheckIdleState+0x14c>)
 8003786:	9200      	str	r2, [sp, #0]
 8003788:	2200      	movs	r2, #0
 800378a:	f000 f859 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d03b      	beq.n	800380a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	60fb      	str	r3, [r7, #12]
  return(result);
 8003798:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
 800379c:	2301      	movs	r3, #1
 800379e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <UART_CheckIdleState+0x150>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c4:	f3ef 8310 	mrs	r3, PRIMASK
 80037c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80037ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
 80037ce:	2301      	movs	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f383 8810 	msr	PRIMASK, r3
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	438a      	bics	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	228c      	movs	r2, #140	; 0x8c
 80037fa:	2120      	movs	r1, #32
 80037fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2284      	movs	r2, #132	; 0x84
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e012      	b.n	8003830 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2288      	movs	r2, #136	; 0x88
 800380e:	2120      	movs	r1, #32
 8003810:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	228c      	movs	r2, #140	; 0x8c
 8003816:	2120      	movs	r1, #32
 8003818:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2284      	movs	r2, #132	; 0x84
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b010      	add	sp, #64	; 0x40
 8003836:	bd80      	pop	{r7, pc}
 8003838:	01ffffff 	.word	0x01ffffff
 800383c:	fffffedf 	.word	0xfffffedf

08003840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	e051      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	3301      	adds	r3, #1
 8003856:	d04e      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fd face 	bl	8000df8 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e051      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2204      	movs	r2, #4
 800387a:	4013      	ands	r3, r2
 800387c:	d03b      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d038      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d035      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2208      	movs	r2, #8
 8003892:	4013      	ands	r3, r2
 8003894:	2b08      	cmp	r3, #8
 8003896:	d111      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f960 	bl	8003b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2290      	movs	r2, #144	; 0x90
 80038ac:	2108      	movs	r1, #8
 80038ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2284      	movs	r2, #132	; 0x84
 80038b4:	2100      	movs	r1, #0
 80038b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02c      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	401a      	ands	r2, r3
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d112      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f943 	bl	8003b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2290      	movs	r2, #144	; 0x90
 80038e6:	2120      	movs	r1, #32
 80038e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2284      	movs	r2, #132	; 0x84
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00f      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	425a      	negs	r2, r3
 8003906:	4153      	adcs	r3, r2
 8003908:	b2db      	uxtb	r3, r3
 800390a:	001a      	movs	r2, r3
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d09e      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b098      	sub	sp, #96	; 0x60
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1dba      	adds	r2, r7, #6
 8003938:	215c      	movs	r1, #92	; 0x5c
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1dba      	adds	r2, r7, #6
 8003942:	215e      	movs	r1, #94	; 0x5e
 8003944:	8812      	ldrh	r2, [r2, #0]
 8003946:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	015b      	lsls	r3, r3, #5
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <UART_Start_Receive_IT+0x56>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <UART_Start_Receive_IT+0x4c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2260      	movs	r2, #96	; 0x60
 8003966:	497b      	ldr	r1, [pc, #492]	; (8003b54 <UART_Start_Receive_IT+0x234>)
 8003968:	5299      	strh	r1, [r3, r2]
 800396a:	e02e      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2260      	movs	r2, #96	; 0x60
 8003970:	21ff      	movs	r1, #255	; 0xff
 8003972:	5299      	strh	r1, [r3, r2]
 8003974:	e029      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <UART_Start_Receive_IT+0x7a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <UART_Start_Receive_IT+0x70>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2260      	movs	r2, #96	; 0x60
 800398a:	21ff      	movs	r1, #255	; 0xff
 800398c:	5299      	strh	r1, [r3, r2]
 800398e:	e01c      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2260      	movs	r2, #96	; 0x60
 8003994:	217f      	movs	r1, #127	; 0x7f
 8003996:	5299      	strh	r1, [r3, r2]
 8003998:	e017      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	055b      	lsls	r3, r3, #21
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10d      	bne.n	80039c2 <UART_Start_Receive_IT+0xa2>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <UART_Start_Receive_IT+0x98>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2260      	movs	r2, #96	; 0x60
 80039b2:	217f      	movs	r1, #127	; 0x7f
 80039b4:	5299      	strh	r1, [r3, r2]
 80039b6:	e008      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2260      	movs	r2, #96	; 0x60
 80039bc:	213f      	movs	r1, #63	; 0x3f
 80039be:	5299      	strh	r1, [r3, r2]
 80039c0:	e003      	b.n	80039ca <UART_Start_Receive_IT+0xaa>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2260      	movs	r2, #96	; 0x60
 80039c6:	2100      	movs	r1, #0
 80039c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2290      	movs	r2, #144	; 0x90
 80039ce:	2100      	movs	r1, #0
 80039d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	228c      	movs	r2, #140	; 0x8c
 80039d6:	2122      	movs	r1, #34	; 0x22
 80039d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e4:	2301      	movs	r3, #1
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	059b      	lsls	r3, r3, #22
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d150      	bne.n	8003aba <UART_Start_Receive_IT+0x19a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2268      	movs	r2, #104	; 0x68
 8003a1c:	5a9b      	ldrh	r3, [r3, r2]
 8003a1e:	1dba      	adds	r2, r7, #6
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d349      	bcc.n	8003aba <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d107      	bne.n	8003a42 <UART_Start_Receive_IT+0x122>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a46      	ldr	r2, [pc, #280]	; (8003b58 <UART_Start_Receive_IT+0x238>)
 8003a3e:	675a      	str	r2, [r3, #116]	; 0x74
 8003a40:	e002      	b.n	8003a48 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a45      	ldr	r2, [pc, #276]	; (8003b5c <UART_Start_Receive_IT+0x23c>)
 8003a46:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d019      	beq.n	8003a84 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a50:	f3ef 8310 	mrs	r3, PRIMASK
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0049      	lsls	r1, r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a84:	f3ef 8310 	mrs	r3, PRIMASK
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0549      	lsls	r1, r1, #21
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	e047      	b.n	8003b4a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	015b      	lsls	r3, r3, #5
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d107      	bne.n	8003ad6 <UART_Start_Receive_IT+0x1b6>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <UART_Start_Receive_IT+0x240>)
 8003ad2:	675a      	str	r2, [r3, #116]	; 0x74
 8003ad4:	e002      	b.n	8003adc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <UART_Start_Receive_IT+0x244>)
 8003ada:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003aea:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aee:	2301      	movs	r3, #1
 8003af0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2190      	movs	r1, #144	; 0x90
 8003b06:	0049      	lsls	r1, r1, #1
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	e018      	b.n	8003b4a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b18:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b20:	653b      	str	r3, [r7, #80]	; 0x50
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2120      	movs	r1, #32
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b018      	add	sp, #96	; 0x60
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	000001ff 	.word	0x000001ff
 8003b58:	080043b1 	.word	0x080043b1
 8003b5c:	08004065 	.word	0x08004065
 8003b60:	08003e91 	.word	0x08003e91
 8003b64:	08003cbd 	.word	0x08003cbd

08003b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b70:	f3ef 8310 	mrs	r3, PRIMASK
 8003b74:	617b      	str	r3, [r7, #20]
  return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4926      	ldr	r1, [pc, #152]	; (8003c2c <UART_EndRxTransfer+0xc4>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
 8003bac:	2301      	movs	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	491b      	ldr	r1, [pc, #108]	; (8003c30 <UART_EndRxTransfer+0xc8>)
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d118      	bne.n	8003c0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be6:	2301      	movs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	228c      	movs	r2, #140	; 0x8c
 8003c12:	2120      	movs	r1, #32
 8003c14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b00e      	add	sp, #56	; 0x38
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	fffffedf 	.word	0xfffffedf
 8003c30:	effffffe 	.word	0xeffffffe

08003c34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	225e      	movs	r2, #94	; 0x5e
 8003c46:	2100      	movs	r1, #0
 8003c48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2256      	movs	r2, #86	; 0x56
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7ff f92b 	bl	8002eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c70:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	2301      	movs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2288      	movs	r2, #136	; 0x88
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff f8f7 	bl	8002ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b006      	add	sp, #24
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b094      	sub	sp, #80	; 0x50
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cc4:	204e      	movs	r0, #78	; 0x4e
 8003cc6:	183b      	adds	r3, r7, r0
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	2160      	movs	r1, #96	; 0x60
 8003ccc:	5a52      	ldrh	r2, [r2, r1]
 8003cce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	228c      	movs	r2, #140	; 0x8c
 8003cd4:	589b      	ldr	r3, [r3, r2]
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	d000      	beq.n	8003cdc <UART_RxISR_8BIT+0x20>
 8003cda:	e0c4      	b.n	8003e66 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce2:	214c      	movs	r1, #76	; 0x4c
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	183b      	adds	r3, r7, r0
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b2d9      	uxtb	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	225e      	movs	r2, #94	; 0x5e
 8003d0c:	5a9b      	ldrh	r3, [r3, r2]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b299      	uxth	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	225e      	movs	r2, #94	; 0x5e
 8003d18:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	225e      	movs	r2, #94	; 0x5e
 8003d1e:	5a9b      	ldrh	r3, [r3, r2]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d000      	beq.n	8003d28 <UART_RxISR_8BIT+0x6c>
 8003d26:	e0a6      	b.n	8003e76 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d28:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	2301      	movs	r3, #1
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	494d      	ldr	r1, [pc, #308]	; (8003e80 <UART_RxISR_8BIT+0x1c4>)
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	647b      	str	r3, [r7, #68]	; 0x44
 8003d64:	2301      	movs	r3, #1
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	228c      	movs	r2, #140	; 0x8c
 8003d90:	2120      	movs	r1, #32
 8003d92:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <UART_RxISR_8BIT+0x1c8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d024      	beq.n	8003df4 <UART_RxISR_8BIT+0x138>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a36      	ldr	r2, [pc, #216]	; (8003e88 <UART_RxISR_8BIT+0x1cc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d01f      	beq.n	8003df4 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f383 8810 	msr	PRIMASK, r3
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	492a      	ldr	r1, [pc, #168]	; (8003e8c <UART_RxISR_8BIT+0x1d0>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d12f      	bne.n	8003e5c <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2110      	movs	r1, #16
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d103      	bne.n	8003e4a <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2210      	movs	r2, #16
 8003e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	225c      	movs	r2, #92	; 0x5c
 8003e4e:	5a9a      	ldrh	r2, [r3, r2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff f833 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e5a:	e00c      	b.n	8003e76 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7fc fc66 	bl	8000730 <HAL_UART_RxCpltCallback>
}
 8003e64:	e007      	b.n	8003e76 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2108      	movs	r1, #8
 8003e72:	430a      	orrs	r2, r1
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b014      	add	sp, #80	; 0x50
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	fffffedf 	.word	0xfffffedf
 8003e84:	40008000 	.word	0x40008000
 8003e88:	40008400 	.word	0x40008400
 8003e8c:	fbffffff 	.word	0xfbffffff

08003e90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b094      	sub	sp, #80	; 0x50
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e98:	204e      	movs	r0, #78	; 0x4e
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	2160      	movs	r1, #96	; 0x60
 8003ea0:	5a52      	ldrh	r2, [r2, r1]
 8003ea2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	228c      	movs	r2, #140	; 0x8c
 8003ea8:	589b      	ldr	r3, [r3, r2]
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	d000      	beq.n	8003eb0 <UART_RxISR_16BIT+0x20>
 8003eae:	e0c4      	b.n	800403a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb6:	214c      	movs	r1, #76	; 0x4c
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	183a      	adds	r2, r7, r0
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	225e      	movs	r2, #94	; 0x5e
 8003ee0:	5a9b      	ldrh	r3, [r3, r2]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	225e      	movs	r2, #94	; 0x5e
 8003eec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	225e      	movs	r2, #94	; 0x5e
 8003ef2:	5a9b      	ldrh	r3, [r3, r2]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d000      	beq.n	8003efc <UART_RxISR_16BIT+0x6c>
 8003efa:	e0a6      	b.n	800404a <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8310 	mrs	r3, PRIMASK
 8003f00:	623b      	str	r3, [r7, #32]
  return(result);
 8003f02:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f04:	647b      	str	r3, [r7, #68]	; 0x44
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	494d      	ldr	r1, [pc, #308]	; (8004054 <UART_RxISR_16BIT+0x1c4>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
 8003f38:	2301      	movs	r3, #1
 8003f3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	228c      	movs	r2, #140	; 0x8c
 8003f64:	2120      	movs	r1, #32
 8003f66:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a37      	ldr	r2, [pc, #220]	; (8004058 <UART_RxISR_16BIT+0x1c8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d024      	beq.n	8003fc8 <UART_RxISR_16BIT+0x138>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a36      	ldr	r2, [pc, #216]	; (800405c <UART_RxISR_16BIT+0x1cc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01f      	beq.n	8003fc8 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d018      	beq.n	8003fc8 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f9c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	492a      	ldr	r1, [pc, #168]	; (8004060 <UART_RxISR_16BIT+0x1d0>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d12f      	bne.n	8004030 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fdc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f383 8810 	msr	PRIMASK, r3
}
 8004006:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2210      	movs	r2, #16
 8004010:	4013      	ands	r3, r2
 8004012:	2b10      	cmp	r3, #16
 8004014:	d103      	bne.n	800401e <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	225c      	movs	r2, #92	; 0x5c
 8004022:	5a9a      	ldrh	r2, [r3, r2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0011      	movs	r1, r2
 8004028:	0018      	movs	r0, r3
 800402a:	f7fe ff49 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800402e:	e00c      	b.n	800404a <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f7fc fb7c 	bl	8000730 <HAL_UART_RxCpltCallback>
}
 8004038:	e007      	b.n	800404a <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2108      	movs	r1, #8
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b014      	add	sp, #80	; 0x50
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	fffffedf 	.word	0xfffffedf
 8004058:	40008000 	.word	0x40008000
 800405c:	40008400 	.word	0x40008400
 8004060:	fbffffff 	.word	0xfbffffff

08004064 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b0a0      	sub	sp, #128	; 0x80
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800406c:	237a      	movs	r3, #122	; 0x7a
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	2160      	movs	r1, #96	; 0x60
 8004074:	5a52      	ldrh	r2, [r2, r1]
 8004076:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	228c      	movs	r2, #140	; 0x8c
 8004094:	589b      	ldr	r3, [r3, r2]
 8004096:	2b22      	cmp	r3, #34	; 0x22
 8004098:	d000      	beq.n	800409c <UART_RxISR_8BIT_FIFOEN+0x38>
 800409a:	e16f      	b.n	800437c <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800409c:	236e      	movs	r3, #110	; 0x6e
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	2168      	movs	r1, #104	; 0x68
 80040a4:	5a52      	ldrh	r2, [r2, r1]
 80040a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040a8:	e116      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b0:	216c      	movs	r1, #108	; 0x6c
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	237a      	movs	r3, #122	; 0x7a
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	400a      	ands	r2, r1
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	225e      	movs	r2, #94	; 0x5e
 80040dc:	5a9b      	ldrh	r3, [r3, r2]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b299      	uxth	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	225e      	movs	r2, #94	; 0x5e
 80040e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040f4:	2207      	movs	r2, #7
 80040f6:	4013      	ands	r3, r2
 80040f8:	d049      	beq.n	800418e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040fc:	2201      	movs	r2, #1
 80040fe:	4013      	ands	r3, r2
 8004100:	d010      	beq.n	8004124 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004102:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2290      	movs	r2, #144	; 0x90
 8004118:	589b      	ldr	r3, [r3, r2]
 800411a:	2201      	movs	r2, #1
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2190      	movs	r1, #144	; 0x90
 8004122:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d00f      	beq.n	800414c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800412c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412e:	2201      	movs	r2, #1
 8004130:	4013      	ands	r3, r2
 8004132:	d00b      	beq.n	800414c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2290      	movs	r2, #144	; 0x90
 8004140:	589b      	ldr	r3, [r3, r2]
 8004142:	2204      	movs	r2, #4
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2190      	movs	r1, #144	; 0x90
 800414a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800414c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	d00f      	beq.n	8004174 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004156:	2201      	movs	r2, #1
 8004158:	4013      	ands	r3, r2
 800415a:	d00b      	beq.n	8004174 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2290      	movs	r2, #144	; 0x90
 8004168:	589b      	ldr	r3, [r3, r2]
 800416a:	2202      	movs	r2, #2
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2190      	movs	r1, #144	; 0x90
 8004172:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2290      	movs	r2, #144	; 0x90
 8004178:	589b      	ldr	r3, [r3, r2]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f7fe fe95 	bl	8002eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2290      	movs	r2, #144	; 0x90
 800418a:	2100      	movs	r1, #0
 800418c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	225e      	movs	r2, #94	; 0x5e
 8004192:	5a9b      	ldrh	r3, [r3, r2]
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d000      	beq.n	800419c <UART_RxISR_8BIT_FIFOEN+0x138>
 800419a:	e09d      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419c:	f3ef 8310 	mrs	r3, PRIMASK
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a6:	2301      	movs	r3, #1
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4975      	ldr	r1, [pc, #468]	; (8004394 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80041be:	400a      	ands	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ce:	f3ef 8310 	mrs	r3, PRIMASK
 80041d2:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041d6:	667b      	str	r3, [r7, #100]	; 0x64
 80041d8:	2301      	movs	r3, #1
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	496a      	ldr	r1, [pc, #424]	; (8004398 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	228c      	movs	r2, #140	; 0x8c
 8004204:	2120      	movs	r1, #32
 8004206:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a60      	ldr	r2, [pc, #384]	; (800439c <UART_RxISR_8BIT_FIFOEN+0x338>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d024      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x204>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a5f      	ldr	r2, [pc, #380]	; (80043a0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01f      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	4013      	ands	r3, r2
 8004234:	d018      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004236:	f3ef 8310 	mrs	r3, PRIMASK
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800423e:	663b      	str	r3, [r7, #96]	; 0x60
 8004240:	2301      	movs	r3, #1
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f383 8810 	msr	PRIMASK, r3
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4953      	ldr	r1, [pc, #332]	; (80043a4 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8004258:	400a      	ands	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d12f      	bne.n	80042d0 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004276:	f3ef 8310 	mrs	r3, PRIMASK
 800427a:	623b      	str	r3, [r7, #32]
  return(result);
 800427c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2110      	movs	r1, #16
 8004298:	438a      	bics	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	2210      	movs	r2, #16
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d103      	bne.n	80042be <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2210      	movs	r2, #16
 80042bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	225c      	movs	r2, #92	; 0x5c
 80042c2:	5a9a      	ldrh	r2, [r3, r2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0011      	movs	r1, r2
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7fe fdf9 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
 80042ce:	e003      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fc fa2c 	bl	8000730 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042d8:	236e      	movs	r3, #110	; 0x6e
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <UART_RxISR_8BIT_FIFOEN+0x288>
 80042e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042e4:	2220      	movs	r2, #32
 80042e6:	4013      	ands	r3, r2
 80042e8:	d000      	beq.n	80042ec <UART_RxISR_8BIT_FIFOEN+0x288>
 80042ea:	e6de      	b.n	80040aa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042ec:	205a      	movs	r0, #90	; 0x5a
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	215e      	movs	r1, #94	; 0x5e
 80042f4:	5a52      	ldrh	r2, [r2, r1]
 80042f6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042f8:	0001      	movs	r1, r0
 80042fa:	187b      	adds	r3, r7, r1
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <UART_RxISR_8BIT_FIFOEN+0x328>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2268      	movs	r2, #104	; 0x68
 8004306:	5a9b      	ldrh	r3, [r3, r2]
 8004308:	187a      	adds	r2, r7, r1
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d23d      	bcs.n	800438c <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	60bb      	str	r3, [r7, #8]
  return(result);
 8004316:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004318:	657b      	str	r3, [r7, #84]	; 0x54
 800431a:	2301      	movs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	491d      	ldr	r1, [pc, #116]	; (80043a8 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8004332:	400a      	ands	r2, r1
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <UART_RxISR_8BIT_FIFOEN+0x348>)
 8004346:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004348:	f3ef 8310 	mrs	r3, PRIMASK
 800434c:	617b      	str	r3, [r7, #20]
  return(result);
 800434e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004350:	653b      	str	r3, [r7, #80]	; 0x50
 8004352:	2301      	movs	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f383 8810 	msr	PRIMASK, r3
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2120      	movs	r1, #32
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f383 8810 	msr	PRIMASK, r3
}
 8004378:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800437a:	e007      	b.n	800438c <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2108      	movs	r1, #8
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b020      	add	sp, #128	; 0x80
 8004392:	bd80      	pop	{r7, pc}
 8004394:	fffffeff 	.word	0xfffffeff
 8004398:	effffffe 	.word	0xeffffffe
 800439c:	40008000 	.word	0x40008000
 80043a0:	40008400 	.word	0x40008400
 80043a4:	fbffffff 	.word	0xfbffffff
 80043a8:	efffffff 	.word	0xefffffff
 80043ac:	08003cbd 	.word	0x08003cbd

080043b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0a2      	sub	sp, #136	; 0x88
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80043b8:	2382      	movs	r3, #130	; 0x82
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	2160      	movs	r1, #96	; 0x60
 80043c0:	5a52      	ldrh	r2, [r2, r1]
 80043c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2284      	movs	r2, #132	; 0x84
 80043cc:	18ba      	adds	r2, r7, r2
 80043ce:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	228c      	movs	r2, #140	; 0x8c
 80043e4:	589b      	ldr	r3, [r3, r2]
 80043e6:	2b22      	cmp	r3, #34	; 0x22
 80043e8:	d000      	beq.n	80043ec <UART_RxISR_16BIT_FIFOEN+0x3c>
 80043ea:	e179      	b.n	80046e0 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043ec:	2376      	movs	r3, #118	; 0x76
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	2168      	movs	r1, #104	; 0x68
 80043f4:	5a52      	ldrh	r2, [r2, r1]
 80043f6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043f8:	e11e      	b.n	8004638 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004400:	2174      	movs	r1, #116	; 0x74
 8004402:	187b      	adds	r3, r7, r1
 8004404:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800440c:	187b      	adds	r3, r7, r1
 800440e:	2282      	movs	r2, #130	; 0x82
 8004410:	18ba      	adds	r2, r7, r2
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	8812      	ldrh	r2, [r2, #0]
 8004416:	4013      	ands	r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800441c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	225e      	movs	r2, #94	; 0x5e
 800442c:	5a9b      	ldrh	r3, [r3, r2]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b299      	uxth	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	225e      	movs	r2, #94	; 0x5e
 8004438:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2184      	movs	r1, #132	; 0x84
 8004442:	187a      	adds	r2, r7, r1
 8004444:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004446:	187b      	adds	r3, r7, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2207      	movs	r2, #7
 800444c:	4013      	ands	r3, r2
 800444e:	d04e      	beq.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004450:	187b      	adds	r3, r7, r1
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	4013      	ands	r3, r2
 8004458:	d010      	beq.n	800447c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800445a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2290      	movs	r2, #144	; 0x90
 8004470:	589b      	ldr	r3, [r3, r2]
 8004472:	2201      	movs	r2, #1
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2190      	movs	r1, #144	; 0x90
 800447a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800447c:	2384      	movs	r3, #132	; 0x84
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	d00f      	beq.n	80044a8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448a:	2201      	movs	r2, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d00b      	beq.n	80044a8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2202      	movs	r2, #2
 8004496:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2290      	movs	r2, #144	; 0x90
 800449c:	589b      	ldr	r3, [r3, r2]
 800449e:	2204      	movs	r2, #4
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2190      	movs	r1, #144	; 0x90
 80044a6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a8:	2384      	movs	r3, #132	; 0x84
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2204      	movs	r2, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <UART_RxISR_16BIT_FIFOEN+0x124>
 80044b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b6:	2201      	movs	r2, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2204      	movs	r2, #4
 80044c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2290      	movs	r2, #144	; 0x90
 80044c8:	589b      	ldr	r3, [r3, r2]
 80044ca:	2202      	movs	r2, #2
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2190      	movs	r1, #144	; 0x90
 80044d2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2290      	movs	r2, #144	; 0x90
 80044d8:	589b      	ldr	r3, [r3, r2]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fe fce5 	bl	8002eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2290      	movs	r2, #144	; 0x90
 80044ea:	2100      	movs	r1, #0
 80044ec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	225e      	movs	r2, #94	; 0x5e
 80044f2:	5a9b      	ldrh	r3, [r3, r2]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d000      	beq.n	80044fc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80044fa:	e09d      	b.n	8004638 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004506:	2301      	movs	r3, #1
 8004508:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450c:	f383 8810 	msr	PRIMASK, r3
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4976      	ldr	r1, [pc, #472]	; (80046f8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800451e:	400a      	ands	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	f383 8810 	msr	PRIMASK, r3
}
 800452c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452e:	f3ef 8310 	mrs	r3, PRIMASK
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	2301      	movs	r3, #1
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453e:	f383 8810 	msr	PRIMASK, r3
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	496b      	ldr	r1, [pc, #428]	; (80046fc <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004550:	400a      	ands	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	228c      	movs	r2, #140	; 0x8c
 8004564:	2120      	movs	r1, #32
 8004566:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a61      	ldr	r2, [pc, #388]	; (8004700 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d024      	beq.n	80045c8 <UART_RxISR_16BIT_FIFOEN+0x218>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a60      	ldr	r2, [pc, #384]	; (8004704 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01f      	beq.n	80045c8 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	4013      	ands	r3, r2
 8004594:	d018      	beq.n	80045c8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004596:	f3ef 8310 	mrs	r3, PRIMASK
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
 80045a0:	2301      	movs	r3, #1
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4954      	ldr	r1, [pc, #336]	; (8004708 <UART_RxISR_16BIT_FIFOEN+0x358>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d12f      	bne.n	8004630 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d6:	f3ef 8310 	mrs	r3, PRIMASK
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	663b      	str	r3, [r7, #96]	; 0x60
 80045e0:	2301      	movs	r3, #1
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2110      	movs	r1, #16
 80045f8:	438a      	bics	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2210      	movs	r2, #16
 8004610:	4013      	ands	r3, r2
 8004612:	2b10      	cmp	r3, #16
 8004614:	d103      	bne.n	800461e <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2210      	movs	r2, #16
 800461c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	225c      	movs	r2, #92	; 0x5c
 8004622:	5a9a      	ldrh	r2, [r3, r2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0011      	movs	r1, r2
 8004628:	0018      	movs	r0, r3
 800462a:	f7fe fc49 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
 800462e:	e003      	b.n	8004638 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0018      	movs	r0, r3
 8004634:	f7fc f87c 	bl	8000730 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004638:	2376      	movs	r3, #118	; 0x76
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004642:	2384      	movs	r3, #132	; 0x84
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	4013      	ands	r3, r2
 800464c:	d000      	beq.n	8004650 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800464e:	e6d4      	b.n	80043fa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004650:	205e      	movs	r0, #94	; 0x5e
 8004652:	183b      	adds	r3, r7, r0
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	215e      	movs	r1, #94	; 0x5e
 8004658:	5a52      	ldrh	r2, [r2, r1]
 800465a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800465c:	0001      	movs	r1, r0
 800465e:	187b      	adds	r3, r7, r1
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d044      	beq.n	80046f0 <UART_RxISR_16BIT_FIFOEN+0x340>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2268      	movs	r2, #104	; 0x68
 800466a:	5a9b      	ldrh	r3, [r3, r2]
 800466c:	187a      	adds	r2, r7, r1
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d23d      	bcs.n	80046f0 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004674:	f3ef 8310 	mrs	r3, PRIMASK
 8004678:	60fb      	str	r3, [r7, #12]
  return(result);
 800467a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800467c:	65bb      	str	r3, [r7, #88]	; 0x58
 800467e:	2301      	movs	r3, #1
 8004680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	491d      	ldr	r1, [pc, #116]	; (800470c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8004696:	400a      	ands	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f383 8810 	msr	PRIMASK, r3
}
 80046a4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80046aa:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ac:	f3ef 8310 	mrs	r3, PRIMASK
 80046b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80046b2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046b4:	657b      	str	r3, [r7, #84]	; 0x54
 80046b6:	2301      	movs	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2120      	movs	r1, #32
 80046ce:	430a      	orrs	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046de:	e007      	b.n	80046f0 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2108      	movs	r1, #8
 80046ec:	430a      	orrs	r2, r1
 80046ee:	619a      	str	r2, [r3, #24]
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b022      	add	sp, #136	; 0x88
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	fffffeff 	.word	0xfffffeff
 80046fc:	effffffe 	.word	0xeffffffe
 8004700:	40008000 	.word	0x40008000
 8004704:	40008400 	.word	0x40008400
 8004708:	fbffffff 	.word	0xfbffffff
 800470c:	efffffff 	.word	0xefffffff
 8004710:	08003e91 	.word	0x08003e91

08004714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2284      	movs	r2, #132	; 0x84
 8004750:	5c9b      	ldrb	r3, [r3, r2]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UARTEx_DisableFifoMode+0x16>
 8004756:	2302      	movs	r3, #2
 8004758:	e027      	b.n	80047aa <HAL_UARTEx_DisableFifoMode+0x66>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2284      	movs	r2, #132	; 0x84
 800475e:	2101      	movs	r1, #1
 8004760:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2288      	movs	r2, #136	; 0x88
 8004766:	2124      	movs	r1, #36	; 0x24
 8004768:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2288      	movs	r2, #136	; 0x88
 800479c:	2120      	movs	r1, #32
 800479e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2284      	movs	r2, #132	; 0x84
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	0018      	movs	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b004      	add	sp, #16
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	dfffffff 	.word	0xdfffffff

080047b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2284      	movs	r2, #132	; 0x84
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e02e      	b.n	800482e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2284      	movs	r2, #132	; 0x84
 80047d4:	2101      	movs	r1, #1
 80047d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2288      	movs	r2, #136	; 0x88
 80047dc:	2124      	movs	r1, #36	; 0x24
 80047de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	438a      	bics	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	08d9      	lsrs	r1, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f854 	bl	80048bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2288      	movs	r2, #136	; 0x88
 8004820:	2120      	movs	r1, #32
 8004822:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2284      	movs	r2, #132	; 0x84
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b004      	add	sp, #16
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2284      	movs	r2, #132	; 0x84
 8004846:	5c9b      	ldrb	r3, [r3, r2]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e02f      	b.n	80048b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2284      	movs	r2, #132	; 0x84
 8004854:	2101      	movs	r1, #1
 8004856:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2288      	movs	r2, #136	; 0x88
 800485c:	2124      	movs	r1, #36	; 0x24
 800485e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2101      	movs	r1, #1
 8004874:	438a      	bics	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004880:	4013      	ands	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 f813 	bl	80048bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2288      	movs	r2, #136	; 0x88
 80048a2:	2120      	movs	r1, #32
 80048a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2284      	movs	r2, #132	; 0x84
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	f1ffffff 	.word	0xf1ffffff

080048bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	226a      	movs	r2, #106	; 0x6a
 80048d0:	2101      	movs	r1, #1
 80048d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2268      	movs	r2, #104	; 0x68
 80048d8:	2101      	movs	r1, #1
 80048da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048dc:	e043      	b.n	8004966 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048de:	260f      	movs	r6, #15
 80048e0:	19bb      	adds	r3, r7, r6
 80048e2:	2208      	movs	r2, #8
 80048e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048e6:	200e      	movs	r0, #14
 80048e8:	183b      	adds	r3, r7, r0
 80048ea:	2208      	movs	r2, #8
 80048ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0e5b      	lsrs	r3, r3, #25
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	240d      	movs	r4, #13
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	2107      	movs	r1, #7
 80048fe:	400a      	ands	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	0f5b      	lsrs	r3, r3, #29
 800490a:	b2da      	uxtb	r2, r3
 800490c:	250c      	movs	r5, #12
 800490e:	197b      	adds	r3, r7, r5
 8004910:	2107      	movs	r1, #7
 8004912:	400a      	ands	r2, r1
 8004914:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004916:	183b      	adds	r3, r7, r0
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	197a      	adds	r2, r7, r5
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	4914      	ldr	r1, [pc, #80]	; (8004970 <UARTEx_SetNbDataToProcess+0xb4>)
 8004920:	5c8a      	ldrb	r2, [r1, r2]
 8004922:	435a      	muls	r2, r3
 8004924:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004926:	197b      	adds	r3, r7, r5
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <UARTEx_SetNbDataToProcess+0xb8>)
 800492c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800492e:	0019      	movs	r1, r3
 8004930:	f7fb fc74 	bl	800021c <__divsi3>
 8004934:	0003      	movs	r3, r0
 8004936:	b299      	uxth	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	226a      	movs	r2, #106	; 0x6a
 800493c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800493e:	19bb      	adds	r3, r7, r6
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	193a      	adds	r2, r7, r4
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <UARTEx_SetNbDataToProcess+0xb4>)
 8004948:	5c8a      	ldrb	r2, [r1, r2]
 800494a:	435a      	muls	r2, r3
 800494c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800494e:	193b      	adds	r3, r7, r4
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <UARTEx_SetNbDataToProcess+0xb8>)
 8004954:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004956:	0019      	movs	r1, r3
 8004958:	f7fb fc60 	bl	800021c <__divsi3>
 800495c:	0003      	movs	r3, r0
 800495e:	b299      	uxth	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2268      	movs	r2, #104	; 0x68
 8004964:	5299      	strh	r1, [r3, r2]
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b005      	add	sp, #20
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	08004a88 	.word	0x08004a88
 8004974:	08004a90 	.word	0x08004a90

08004978 <memset>:
 8004978:	0003      	movs	r3, r0
 800497a:	1882      	adds	r2, r0, r2
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	7019      	strb	r1, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	2600      	movs	r6, #0
 800498c:	4c0c      	ldr	r4, [pc, #48]	; (80049c0 <__libc_init_array+0x38>)
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	2600      	movs	r6, #0
 800499a:	f000 f823 	bl	80049e4 <_init>
 800499e:	4c0a      	ldr	r4, [pc, #40]	; (80049c8 <__libc_init_array+0x40>)
 80049a0:	4d0a      	ldr	r5, [pc, #40]	; (80049cc <__libc_init_array+0x44>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	00b3      	lsls	r3, r6, #2
 80049ae:	58eb      	ldr	r3, [r5, r3]
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	00b3      	lsls	r3, r6, #2
 80049b8:	58eb      	ldr	r3, [r5, r3]
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08004aa0 	.word	0x08004aa0
 80049c4:	08004aa0 	.word	0x08004aa0
 80049c8:	08004aa4 	.word	0x08004aa4
 80049cc:	08004aa0 	.word	0x08004aa0

080049d0 <memcpy>:
 80049d0:	2300      	movs	r3, #0
 80049d2:	b510      	push	{r4, lr}
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d100      	bne.n	80049da <memcpy+0xa>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	5ccc      	ldrb	r4, [r1, r3]
 80049dc:	54c4      	strb	r4, [r0, r3]
 80049de:	3301      	adds	r3, #1
 80049e0:	e7f8      	b.n	80049d4 <memcpy+0x4>
	...

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
 80049fc:	0000      	movs	r0, r0
	...

08004a00 <__FLASH_Program_Fast_veneer>:
 8004a00:	b401      	push	{r0}
 8004a02:	4802      	ldr	r0, [pc, #8]	; (8004a0c <__FLASH_Program_Fast_veneer+0xc>)
 8004a04:	4684      	mov	ip, r0
 8004a06:	bc01      	pop	{r0}
 8004a08:	4760      	bx	ip
 8004a0a:	bf00      	nop
 8004a0c:	2000000d 	.word	0x2000000d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000000c:	b580      	push	{r7, lr}
2000000e:	b088      	sub	sp, #32
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
20000014:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000016:	231f      	movs	r3, #31
20000018:	18fb      	adds	r3, r7, r3
2000001a:	2200      	movs	r2, #0
2000001c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000026:	4b1a      	ldr	r3, [pc, #104]	; (20000090 <FLASH_Program_Fast+0x84>)
20000028:	695a      	ldr	r2, [r3, #20]
2000002a:	4b19      	ldr	r3, [pc, #100]	; (20000090 <FLASH_Program_Fast+0x84>)
2000002c:	2180      	movs	r1, #128	; 0x80
2000002e:	02c9      	lsls	r1, r1, #11
20000030:	430a      	orrs	r2, r1
20000032:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000034:	f3ef 8310 	mrs	r3, PRIMASK
20000038:	60fb      	str	r3, [r7, #12]
  return(result);
2000003a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000003c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000003e:	b672      	cpsid	i
}
20000040:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000042:	e00f      	b.n	20000064 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000044:	697a      	ldr	r2, [r7, #20]
20000046:	69bb      	ldr	r3, [r7, #24]
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000004c:	697b      	ldr	r3, [r7, #20]
2000004e:	3304      	adds	r3, #4
20000050:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000052:	69bb      	ldr	r3, [r7, #24]
20000054:	3304      	adds	r3, #4
20000056:	61bb      	str	r3, [r7, #24]
    index++;
20000058:	211f      	movs	r1, #31
2000005a:	187b      	adds	r3, r7, r1
2000005c:	781a      	ldrb	r2, [r3, #0]
2000005e:	187b      	adds	r3, r7, r1
20000060:	3201      	adds	r2, #1
20000062:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000064:	231f      	movs	r3, #31
20000066:	18fb      	adds	r3, r7, r3
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	2b3f      	cmp	r3, #63	; 0x3f
2000006c:	d9ea      	bls.n	20000044 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	4b07      	ldr	r3, [pc, #28]	; (20000090 <FLASH_Program_Fast+0x84>)
20000072:	691a      	ldr	r2, [r3, #16]
20000074:	23c0      	movs	r3, #192	; 0xc0
20000076:	029b      	lsls	r3, r3, #10
20000078:	4013      	ands	r3, r2
2000007a:	d1f9      	bne.n	20000070 <FLASH_Program_Fast+0x64>
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	f383 8810 	msr	PRIMASK, r3
}
20000086:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b008      	add	sp, #32
2000008e:	bd80      	pop	{r7, pc}
20000090:	40022000 	.word	0x40022000
